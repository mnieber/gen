{% magic_with item_name as yellowTulip %}
{% magic_with load_items_effect.item_name as redRose %}
{% magic_with load_item_effect.item_name as blueDaisy %}
{% magic_with load_item_effect.name_postfix as Flower %}
{% magic_with item_posted.item_name as purpleOrchid %}
import { normalize, schema } from 'normalizr';
import { ApiBase } from 'src/api/ApiBase';
import { ObjT } from 'src/utils/types';

{% for item_name in res.schema_item_names %}
const yellowTulip = new schema.Entity('yellowTulips');
{% endfor %}

{% for load_items_effect in res.api_module.load_items_effects %}
const redRoseList = new schema.Array(redRose);
{% endfor %}

export class Api extends ApiBase {
{% for load_items_effect in res.api_module.load_items_effects %}
  getRedRoses() {
    return this._doQuery(
      'getRedRoses',
      `query getRedRoses {
        redRoses {
{{ res.p_section_item_fields(load_items_effect.item_name) }}
        }
      }`,
      {},
      (response: ObjT) => {
        return normalize(response.redRoses, redRoseList).entities;
      },
      (error: ObjT) => {
        return error.response.errors[0].message;
      }
    );
  }

{% endfor %}

{% for load_item_effect in res.api_module.load_item_effects %}
{% with params = res.p_section_load_item_effect(load_item_effect) %}
  getBlueDaisyFlower(
    {{ params.params }}
  ) {
    return this._doQuery(
      'getBlueDaisyFlower',
      `query getBlueDaisyFlower(
{{ params.graphql_params }}
      ) {
        blueDaisyFlower(
{{ params.graphql_params_inner }}
        ) {
{{ res.p_section_item_fields(load_item_effect.item_name) }}
        }
      }`,
      {
        {{ params.vars }}
      },
      (response: ObjT) => normalize(response.blueDaisyFlower, blueDaisy).entities,
      (error: ObjT) => error.response.errors[0].message
    );
  }
{% endwith %}

{% endfor %}

{% for item_posted in res.items_posted %}
{% with params = res.p_section_post_item(item_posted) %}
  postPurpleOrchid(
    {{ params.params }}
  ) {
    return this._doQuery(
      'postPurpleOrchid',
      `query postPurpleOrchid(
{{ params.graphql_params }}
      ) {
        postPurpleOrchid(
{{ params.graphql_params_inner }}
        ) {
{{ res.p_section_item_fields(item_posted.item_name) }}
        }
      }`,
      {
        {{ params.vars }}
      },
      (response: ObjT) => normalize(response.purpleOrchid, purpleOrchid).entities,
      (error: ObjT) => error.response.errors[0].message
    );
  }
{% endwith %}

{% endfor %}
}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
