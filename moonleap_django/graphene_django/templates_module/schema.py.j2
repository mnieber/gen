{% magic_with item_type.name_camel as yellowTulip %}
{% magic_with form.item_name_camel as redRose %}
{% magic_with item.item_name_camel as blueDaisy %}
{% magic_with item_list.item_name_camel as purpleOrchid %}
{% magic_with item_list.item_name_snake as purple_orchid %}
import graphene
from graphene_django.types import DjangoObjectType
{% for item_type in res.item_types %}
from {{ item_type.module.name_snake }}.models import YellowTulip
{% endfor %}

{% for item_type in res.item_types %}
class YellowTulipType(DjangoObjectType):
    class Meta:
        model = YellowTulip
        exclude = [{{ graphene.p_section_exclude(item_type.name_camel) }}]

{% endfor %}


{% for item_list in res.item_lists_provided %}
class PurpleOrchidsQuery:
    purple_orchids = graphene.List(PurpleOrchidType)

    def resolve_purple_orchids(self, info, **kwargs):
        return PurpleOrchid.objects.all()

{% endfor %}

{% for form in res.forms %}
class RedRoseFormType(graphene.InputObjectType):
{{ graphene.p_section_graphene_fields(form.item_name_camel + "Form") }}

class RedRose(graphene.Mutation):
    class Arguments:
        form = graphene.Argument(RedRoseFormType)

    success = graphene.Boolean()

    @staticmethod
    def mutate(parent, info, form):
        # TODO: post form
        return RedRose(success=False)

{% endfor %}

{% for item in res.items_received %}
class PostBlueDaisy(graphene.Mutation):
    class Arguments:
        form = graphene.Argument(BlueDaisyType)

    success = graphene.Boolean()

    @staticmethod
    def mutate(parent, info, form):
        # TODO: post form
        return PostBlueDaisy(success=False)

{% endfor %}


class Query({{ graphene.p_section_query_base_types(res) }}graphene.ObjectType):
    pass


class Mutation(graphene.ObjectType):
{{ graphene.p_section_mutation_fields(res) }}


{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}