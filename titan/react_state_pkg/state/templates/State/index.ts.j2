{% magic_with res.name as yellowTulip %}
{% magic_with store.name as BlueDaisy %}
{% magic_with pipeline.output.item_name as redRose %}

{% clean_up_js_imports %}
import { setCallbacks } from 'aspiration';
import { makeObservable } from 'mobx';
import { addCleanUpFunctionToCtr, cleanUpCtr } from 'react-default-props-context';
import * as Skandha from 'skandha';
import { ClassMemberT as CMT, facet, getm } from 'skandha';
import { registerCtr } from 'skandha-mobx';
import { getIds } from 'src/utils/ids';
import * as Facets from 'skandha-facets';
import * as FacetPolicies from 'skandha-facets/policies';
{% for bvr in _.bvrs %}
{{ bvr.sections.imports() }}
{% endfor %}

import { Inputs } from '{{ res.module.module_path }}/YellowTulipState/facets/Inputs';
import { Outputs } from '{{ res.module.module_path }}/YellowTulipState/facets/Outputs';
import * as Policies from './policies';
import * as Handlers from './handlers';
{% end_clean_up_js_imports %}

type PropsT = {
  {% for pipeline in _.pipelines %}
  {% if pipeline.get_bvr("deletion") %}
  deleteRedRoses: (ids: string[]) => Promise;
  {% endif %}
  {% endfor %}
};

export class YellowTulipState {
  @facet inputs: Inputs = new Inputs();
  @facet outputs: Outputs = new Outputs();

{{ sections.constructor() }}

{{ sections.callbacks() }}

{% for pipeline in _.pipelines %}
  _applyRedRosesPolicies(props: PropsT) {
    const Inputs_items = [Inputs, 'redRoses', this] as CMT;
    const Outputs_display = [Outputs, 'redRosesDisplay', this] as CMT;
{% for bvr in pipeline.bvrs %}
{{ bvr.sections.declare_policies(pipeline.bvrs) }}
{% endfor %}

    const policies = [
{{ sections.policies(pipeline) }}
{% for bvr in pipeline.bvrs %}
{{ bvr.sections.policies(pipeline.bvrs) }}
{% endfor %}
    ];

    Skandha.installPolicies<any>(policies, this.redRoses);
  }

{% endfor %}

  getSummary() {
    return Skandha.getCtrState(this);
  }

  destroy() {
    cleanUpCtr(this);
  }

  constructor(props: PropsT) {
    registerCtr({
      ctr: this,
      childCtrs: [
        {% for pipeline in _.pipelines %}
        {
          ctr: this.redRoses,
          details: { name: 'RedRoses' },
          initCtr: () => {
            this._setRedRosesCallbacks(props);
            this._applyRedRosesPolicies(props);
            addCleanUpFunctionToCtr(this, () => cleanUpCtr(this.redRoses));
          },
        },
        {% endfor %}
      ],
    });
  }
}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
