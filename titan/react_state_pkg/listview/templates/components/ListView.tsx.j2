{% magic_with res.item_name as yellowTulip %}
{% magic_with res.name as blueDaisy %}
{% magic_with res.module.name as gardenFlowers %}
{% magic_with field_name as redRose %}
{% clean_up_js_imports %}
import classnames from 'classnames';
import * as R from 'ramda';
import { observer } from 'mobx-react-lite';
import { FC, useDefaultProps } from 'react-default-props-context';
import { YellowTulipListViewItem } from 'src/gardenFlowers/components';
import { YellowTulipT } from 'src/gardenFlowers/types';
import { getResourceView } from 'src/utils/components';
{% if _.selection_bvr %}
import { useRouteMatch } from 'react-router-dom';
import { createNavigateTo } from 'src/routes/createNavigateTo';
import { mergeClickHandlers } from 'src/utils/mergeClickHandlers';
{% endif %}

{% if _.deletion_bvr %}
import { Deletion } from 'skandha-facets/Deletion';
{% endif %}
{% if _.highlight_bvr %}
import { Highlight } from 'skandha-facets/Highlight';
{% endif %}
{% if _.selection_bvr %}
import { Selection } from 'skandha-facets/Selection';
import { ClickToSelectItems } from 'skandha-facets/handlers';
{% endif %}

{% end_clean_up_js_imports %}

import './YellowTulipListView.scss';

type PropsT = {
  className?: any;
};

type DefaultPropsT = {
  yellowTulips: YellowTulipT[],
  yellowTulipsRS: string,
{% if _.deletion_bvr %}  yellowTulipsDeletion: Deletion,{% endif %}
{% if _.highlight_bvr %}  yellowTulipsHighlight: Highlight,{% endif %}
{% if _.selection_bvr %}  yellowTulipsSelection: Selection,{% endif %}
};

export const BlueDaisy: FC<PropsT, DefaultPropsT> = observer((p: PropsT) => {
  const props = useDefaultProps<PropsT, DefaultPropsT>(p);

  const resourceView =
    props.yellowTulipsRS === 'loading' ? <div>Loading...</div> : undefined;
  if (resourceView) return resourceView;

{% if _.selection_bvr %}
  const handlerClick = new ClickToSelectItems({
    selection: props.yellowTulipsSelection
  });
{% endif %}

{% if _.selection_bvr %}
  const renderedRoute = useRouteMatch();
  const navigateToYellowTulip = createNavigateTo(renderedRoute, (yellowTulip: YellowTulipT) => ({
{% for field_name in _.type_spec.select_item_by %}
    yellowTulipRedRose: yellowTulip.redRose,
{% endfor %}
  }));
{% endif %}

  const yellowTulipDivs = R.pipe(
    R.always(props.yellowTulips),
    R.map((x: YellowTulipT) => {
      return (
        <BlueDaisyItem
          key={x.id}
          yellowTulip={x}
{% if _.selection_bvr or _.highlight_bvr %}
          className={classnames({
{% if _.selection_bvr %}'BlueDaisyItem--selected': x && props.yellowTulipsSelection.ids.includes(x.id),{% endif %}
{% if _.highlight_bvr %}'BlueDaisyItem--highlighted': x && props.yellowTulipsHighlight.id == x.id,{% endif %}
          })}
{% endif %}
{% if _.deletion_bvr %}
          onDelete={() => props.yellowTulipsDeletion.delete([x.id])}
{% endif %}
{% if _.selection_bvr %}
          {...mergeClickHandlers([
              handlerClick.handle(x.id),
              {
                  onMouseDown: (e: any) => {
                      navigateToYellowTulip(x);
                  },
              },
          ])}
{% else %}
          onMouseUp={(e: any) => {navigateToYellowTulip(x);}}
{% endif %}
        />
      );
    })
  )();

  const noItems = <h2>There are no yellowTulips</h2>;

  return (
    <div
      className={classnames(
        'YellowTulipListView', 'flex flex-col w-full',
        props.className
      )}
    >
      {yellowTulipDivs.length > 0 && yellowTulipDivs}
      {yellowTulipDivs.length === 0 && noItems}
    </div>
  );
});
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
