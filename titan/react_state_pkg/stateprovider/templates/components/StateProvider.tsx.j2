{% magic_with res.state.name as yellowTulip %}
{% clean_up_js_imports %}
import * as React from 'react';
import * as R from 'ramda';
import { reaction } from 'mobx';
import { log } from 'src/utils/logging';
import { flags } from 'src/app/flags';
import { lookUp } from 'src/utils/ids';
{{ sections.default_prop_type_imports() }}

import { YellowTulipState } from '{{ res.module.module_path }}/YellowTulipState';
import { CtrProvider, FC, useDefaultProps } from 'react-default-props-context';
import { useStore } from 'src/app/components';
{% end_clean_up_js_imports %}

type PropsT = React.PropsWithChildren<{}>;

type DefaultPropsT = { {{ sections.declare_default_input_props() }} };

export const YellowTulipStateProvider: FC<PropsT, DefaultPropsT> = (p: PropsT) => {
  const props = useDefaultProps<PropsT, DefaultPropsT>(p);
  const { {{ sections.input_stores() }} } = useStore();

  const createState = () => new YellowTulipState({});

  const updateState = (state: YellowTulipState) => {
    return reaction(
      () => {
        return {
{{ sections.get_state_input_values() }}
        }
      },
      (inputs) => {
{{ sections.set_state_input_values() }}
        if (flags.logStateProviders) {
          log('YellowTulipState updated', state.getSummary());
        }
      },
      {
        fireImmediately: true,
      }
    );
  };

  const getDefaultProps = (state: YellowTulipState) => {
    return {
{{ sections.default_props() }}
    };
  };

  return (
    <CtrProvider
      createCtr={createState}
      updateCtr={updateState}
      destroyCtr={(state: YellowTulipState) => state.destroy()}
      getDefaultProps={getDefaultProps}
    >
      {props.children}
    </CtrProvider>
  );
};
{% end_magic_with %}
