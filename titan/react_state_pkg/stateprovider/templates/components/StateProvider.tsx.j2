{% magic_with res.state.name as yellowTulip %}
{% magic_with item_name as redRose %}
{% magic_with store.name as BlueDaisy %}
import * as React from 'react';
import { reaction } from 'mobx';
import { values } from 'ramda';

{% for item_name, store in res.state.store_by_item_name.items() %}
import { resUrls as blueDaisyResUrls } from '{{ store.module_path }}/BlueDaisy';
{% endfor %}
import { YellowTulipState } from '{{ res.module_path }}/YellowTulipState';
import { CtrProvider, FC, useDefaultProps } from 'react-default-props-context';
import { useStore } from 'src/app/components';

type PropsT = React.PropsWithChildren<{}>;

type DefaultPropsT = {};

export const YellowTulipStateProvider: FC<PropsT, DefaultPropsT> = (p: PropsT) => {
  const props = useDefaultProps<PropsT, DefaultPropsT>(p);
  const {
{% for item_name, store in res.state.store_by_item_name.items() %}
    blueDaisy,
{% endfor %}
  } = useStore();

  const createState = () => {
    return new YellowTulipState({});
  };

  const updateState = (state: YellowTulipState) => {
    return reaction(
      () => ({
{% for item_name, store in res.state.store_by_item_name.items() %}
        redRoses: values(blueDaisy.redRoseById),
{% endfor %}
      }),
      (inputs) => {
{% for item_name, store in res.state.store_by_item_name.items() %}
        state.inputs.redRoses = inputs.redRoses;
{% endfor %}
      },
      {
        fireImmediately: true,
      }
    );
  };

  const getDefaultProps = (state: YellowTulipState) => {
    return {
{{ res.sections.default_props() }}
    };
  };

  return (
    <CtrProvider
      createCtr={createState}
      updateCtr={updateState}
      destroyCtr={(state: YellowTulipState) => state.destroy()}
      getDefaultProps={getDefaultProps}
    >
      {props.children}
    </CtrProvider>
  );
};

{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
