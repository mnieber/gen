{% magic_with res.state.name as yellowTulip %}
{% magic_with item_name as redRose %}
{% clean_up_js_imports %}
import * as React from 'react';
import * as R from 'ramda';
import { reaction } from 'mobx';
import { observer } from 'mobx-react-lite';
import { log } from 'src/utils/logging';
import { flags } from 'src/app/flags';
import { lookUp } from 'src/utils/ids';
{{ sections.default_input_props_imports() }}
{% for query_name in _.query_names %}
import { use{{ query_name | u0 }} } from 'src/api/queries';
{% endfor %}
{% for mutation in _.mutation_names %}
import { use{{ mutation | u0 }} } from 'src/api/mutations';
{% endfor %}

import { YellowTulipState } from '{{ res.module.module_path }}/YellowTulipState';
import { CtrProvider, FC, useDefaultProps } from 'react-default-props-context';
import { useStore } from 'src/app/components';
{% end_clean_up_js_imports %}

type PropsT = React.PropsWithChildren<{}>;

type DefaultPropsT = {
  {% for x in _.default_input_props %}
  {{ x.ts_var }}: {{ x.ts_type }};
  {% endfor %}
};

export const YellowTulipStateProvider: FC<PropsT, DefaultPropsT> = observer(
  (p: PropsT) => {
    const props = useDefaultProps<PropsT, DefaultPropsT>(p);
    {% for query_name in _.query_names %}
    const {{ query_name }} = use{{ query_name | u0 }}();
    {% endfor %}
    {% for mutation_name in _.mutation_names %}
    const {{ mutation_name }} = use{{ mutation_name | u0 }}();
    {% endfor %}

    const createState = () => new YellowTulipState({
        {% for item_name, bvrs in _.state.bvrs_by_item_name.items() %}
        {% if "deletion" in _.facet_names_by_item_name[item_name] %}
        deleteRedRoses: deleteRedRoses.mutateAsync,
        {% endif %}
        {% endfor%}
    });

    const updateState = (state: YellowTulipState) =>
      reaction(
        () => {
          return {
            {{ sections.get_state_input_values() }}
          }
        },
        (inputs) => {
          {{ sections.set_state_input_values() }}
          if (flags.logStateProviders) {
            log('YellowTulipState updated', state.getSummary());
          }
        },
        {
          fireImmediately: true,
        }
      );

    const getDefaultProps = (state: YellowTulipState) => {
      return {
  {{ sections.default_props() }}
      };
    };

    return (
      <CtrProvider
        createCtr={createState}
        updateCtr={updateState}
        destroyCtr={(state: YellowTulipState) => state.destroy()}
        getDefaultProps={getDefaultProps}
      >
        {props.children}
      </CtrProvider>
    );
  }
);
{% end_magic_with %}
{% end_magic_with %}
