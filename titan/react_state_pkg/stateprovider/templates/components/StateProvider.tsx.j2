{% magic_with res.state.name as yellowTulip %}
{% clean_up_js_imports %}
import * as React from 'react';
import * as R from 'ramda';
import { reaction } from 'mobx';
import { observer } from 'mobx-react-lite';
import { log } from 'src/utils/logging';
import { flags } from 'src/app/flags';
import { lookUp } from 'src/utils/ids';
{% for x in _.default_input_props %}
import { {{ _.ts_type(x) }} } from '{{ _.ts_type_import_path(x) }}';
{% endfor %}
{% for query_name in _.query_names %}
import { use{{ query_name | u0 }} } from 'src/api/queries';
{% endfor %}

import { YellowTulipState } from '{{ res.module.module_path }}/YellowTulipState';
import { CtrProvider, FC, useDefaultProps } from 'react-default-props-context';
import { useStore } from 'src/app/components';
{% end_clean_up_js_imports %}

type PropsT = React.PropsWithChildren<{}>;

type DefaultPropsT = {
  {% for x in _.default_input_props %}
  {{ _.ts_var(x) }}: {{ _.ts_type(x) }};
  {% endfor %}
};

export const YellowTulipStateProvider: FC<PropsT, DefaultPropsT> = observer(
  (p: PropsT) => {
    const props = useDefaultProps<PropsT, DefaultPropsT>(p);
    {% for query_name in _.query_names %}
    const {{ query_name }} = use{{ query_name | u0 }}();
    {% endfor %}
    const createState = () => new YellowTulipState({});

    const updateState = (state: YellowTulipState) =>
      reaction(
        () => {
          return {
            {{ sections.get_state_input_values() }}
          }
        },
        (inputs) => {
          {{ sections.set_state_input_values() }}
          if (flags.logStateProviders) {
            log('YellowTulipState updated', state.getSummary());
          }
        },
        {
          fireImmediately: true,
        }
      );

    const getDefaultProps = (state: YellowTulipState) => {
      return {
  {{ sections.default_props() }}
      };
    };

    return (
      <CtrProvider
        createCtr={createState}
        updateCtr={updateState}
        destroyCtr={(state: YellowTulipState) => state.destroy()}
        getDefaultProps={getDefaultProps}
      >
        {props.children}
      </CtrProvider>
    );
  }
);
{% end_magic_with %}
