{% magic_with res.name as redRose %}
{% magic_with res.item_list.item_name as yellowTulip %}
{% clean_up_js_imports %}
import React from 'react';
import { observer } from 'mobx-react-lite';
import { FC, useDefaultProps } from 'react-default-props-context';
import { Selection } from 'skandha-facets/Selection';
import { Effect } from 'src/utils/components';
import * as R from 'ramda';
import { {{ _.item_list.item.ts_type }} } from '{{ _.item_ts_type_import_path }}';
{% end_clean_up_js_imports %}

type ArgsT = {
  yellowTulipsSelection: Selection;
{% if _.route_params and sections.get_item_id() %}
  yellowTulips: {{ _.item_list.ts_type }};
{% endif %}
{{ sections.select_effect_args() }}
};

const f = (args: ArgsT) => {
{% if sections.get_item_id() %}
  {{ sections.get_item_id() }};
  if (yellowTulipId) {
    args.yellowTulipsSelection.selectItem({ itemId: yellowTulipId});
  }
{% else %}
  if (args.yellowTulipId) {
    args.yellowTulipsSelection.selectItem({ itemId: args.yellowTulipId});
  }
{% endif %}
};

type PropsT = {};

type DefaultPropsT = {
  yellowTulipsSelection: Selection;
{% if _.route_params and sections.get_item_id() %}
  yellowTulips: {{ _.item_list.ts_type }};
{% endif %}
};

export const RedRose: FC<PropsT, DefaultPropsT> = observer((p: PropsT) => {
  const props = useDefaultProps<PropsT, DefaultPropsT>(p);

  return (
    <Effect
      f={f}
      getArgs={(params) => {
        return {
          yellowTulipsSelection: props.yellowTulipsSelection,
{% if _.route_params and sections.get_item_id() %}
          yellowTulips: props.yellowTulips,
{% endif %}
          {{ sections.extract_params() }}
        }
      }}
    />
  );
});
{% end_magic_with %}
{% end_magic_with %}
