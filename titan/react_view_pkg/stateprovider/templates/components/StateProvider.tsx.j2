{% magic_with containerItem = container.item_name %}
{% magic_with myComponent = _.component.name %}
{% magic_with myContainer = container.name %}
{% magic_with MyState = _.component.state.name %}
{% magic_with MyBvr = bvr.name %}
import React from 'react';
import { makeAutoObservable } from 'mobx';
import { updateSources } from '/src/resourceStates';
import { DefaultPropsProvider } from 'react-default-props-context';
import { dps, withDefaultProps } from '/src/app/defaultProps';
import { cn } from '/src/utils/classnames';
import { useBuilder } from '/src/utils/hooks/useBuilder';
import { observer } from 'mobx-react-lite';
import { isLoading, isUpdating } from '/src/api/getState';
import { MyState } from '/src/{{ __.state.module.module_path }}/MyState';
import { useMyState } from '/src/{{ __.state.module.module_path }}/hooks/useMyState';

export type PropsT = React.PropsWithChildren<{}>;

const DefaultProps = {};

export const MyComponent = observer(
  withDefaultProps((props: PropsT & typeof DefaultProps) => {
    const { myState: state, } = useMyState({ /* MOONLEAP TODO */ });

    const cache = useBuilder(() =>
      makeAutoObservable({
        get containerItems() {                                                                                  {% for container in __.state_provider.state.containers %}{% if container.item_list %}
          return updateSources(
            {
              resource: state.{{ container.name }}Ctr.display.items,                                            {% ?? container.display_bvr %}
              resource: state.{{ container.name }}Ctr.store.items,                                              {% ?? not container.display_bvr %}
              resourceName: '{{ container.name }}'
            },
            [ 'loading', () => "MOONLEAP TODO" ],
            [ 'updating', () => "MOONLEAP TODO" ],
          );
        },
        get containerItem() {                                                                                   {% if container.highlight_bvr %}
          return updateSources(
            { resource: state.{{ container.name }}Ctr.highlight.item },
            [ 'loading', () => "MOONLEAP TODO" ],
            [ 'updating', () => "MOONLEAP TODO" ],
          );
        },                                                                                                      {% endif %}{% endif %}{% endfor %}
      })
    );

    const getDefaultPropsContext = () => {
      const result: any = {
        defaultProps: {
          myState: () => state,
        }
      };

      result.defaultProps = {                                                                                   {% for container in __.state.containers %}{% if container.item_list %}
        ...result.defaultProps,
        containerItems: () => cache.containerItems,                                                             {% ?? container.item_list %}
        containerItem: () => cache.containerItem,                                                               {% ?? container.highlight_bvr %}
        containerItemsAddition: () => state.myContainerCtr.addition,                                            {% ?? container.addition_bvr %}
        containerItemsDeletion: () => state.myContainerCtr.deletion,                                            {% ?? container.deletion_bvr %}
        containerItemsDragAndDrop: () => state.myContainerCtr.dragAndDrop,                                      {% ?? container.drag_and_drop_bvr %}
        containerItemsEdit: () => state.myContainerCtr.edit,                                                    {% ?? container.edit_bvr %}
        containerItemsFiltering: () => state.myContainerCtr.filtering,                                          {% ?? container.filtering_bvr %}
        containerItemsHighlight: () => state.myContainerCtr.highlight,                                          {% ?? container.highlight_bvr %}
        containerItemsPagination: () => state.myContainerCtr.pagination,                                        {% ?? container.pagination_bvr %}
        containerItemsSelection: () => state.myContainerCtr.selection,                                          {% ?? container.selection_bvr %}
        containerItemsMyBvr: () => state.myContainerCtr.myBvr,                                                  {% !! bvr in __.other_bvrs(container) %}
      };
      {{ "" }}                                                                                                  {% endif %}{% endfor %}
      return result;
    };

    return (
      <DefaultPropsProvider extend value={getDefaultPropsContext()}>
        {props.children}
      </DefaultPropsProvider>
    );
  }, DefaultProps)
);
