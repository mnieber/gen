{% magic_with __.state.name as MyState %}
{% magic_with query.name as myQuery %}
{% magic_with mutation.name as myMutation %}
{% magic_with container.item_name as containerItem %}
{% magic_with container.name as myContainer %}
import { reaction } from 'mobx';
import { observer } from 'mobx-react-lite';
import * as R from 'ramda';
import React from 'react';
import { NestedDefaultPropsContext } from 'react-default-props-context';
import { maybe } from 'src/api/loadingState';
import { useMyQuery } from 'src/api/queries';                                                                   {% for query in __.queries %}{% endfor %}
import { useMyMutation } from 'src/api/mutations';                                                              {% for mutation in __.mutations %}{% endfor %}
import { defaultProps as dps, withDefaultProps } from 'src/app/defaultProps';
import { flags } from 'src/app/flags';
import { initRS, setToUpdating } from 'src/app/ResourceState';
import { lookUp, getIds } from 'src/utils/ids';
import { MyState } from 'src/{{ __.state.state_provider.module.module_path }}/MyState';                         {% ?? __.state %}
import { log } from 'src/utils/logging';

type PropsT = React.PropsWithChildren<{}>;

const DefaultProps = {
    ...dps.{{ item.ts_var }},                                                                                   {% !! item in __.input_items %}
    ...dps.{{ item_list.ts_var }},                                                                              {% !! item_list in __.input_item_lists %}
};

export const {{ _.component.name }} = observer(
  withDefaultProps((props: PropsT & typeof DefaultProps) => {
    const myQuery = useMyQuery();                                                                               {% !! query in __.queries %}
    const myMutation = useMyMutation();                                                                         {% !! mutation in __.mutations %}

    const [state] = React.useState(() => new MyState({                                                          {% if __.state %}
      deleteContainerItems: (ids: string[]) => {                                                                {% for container in __.state.containers %}{% if container.get_bvr("deletion") %}
        R.map(setToUpdating, lookUp(ids, state.containerItems.data.containerItemById));
        return {{ __.delete_items_expr(container) }};
      },                                                                                                        {% endif %}
      saveMyContainerItemOrdering: (containerItems: ContainerItemT[]) => {                                      {% if container.get_bvr("insertion") %}
        return {{ __.order_items_expr(container) }};
      },                                                                                                        {% endif %}{% endfor %}
    }));

    (React.useEffect as any)(() => {
      const cleanUpReaction = reaction(
        () => {
          return {
            {{ pipeline.output_name }}: {{ pipeline.result_expression }},                                       {% !! pipeline in __.pipelines %}
          }
        },
        (inputs) => {
          R.forEach(initRS, inputs.containerItems ?? []);                                                       {% for container, pipeline in __.pipeline_by_container %}
          state.myContainer.data.containerItems = inputs.{{ pipeline.output_name }} ?? [];                      {% endfor %}
          if (flags.logStateProviders) {
            log('MyState updated', state.getSummary());
          }
        },
        {
          fireImmediately: true,
        }
      );
      return () => {
        cleanUpReaction();
        state.destroy();
      };
    });                                                                                                         {% endif %}

    const getDefaultPropsContext = () => {
      const result = { defaultProps: {} };

      result.defaultProps = {                                                                                   {% for container in __.state.containers %}
        ...result.defaultProps,
        {{ named_item.typ.item_name }}: () => maybe({{ __.maybe_expr(named_item) }})                            {% for named_item in _.component.named_items %}
          {{ __.get_pipeline(named_item).result_expression }}
        ),                                                                                                      {% endfor %}
        {{ named_item_list.typ.item_name|plural }}: () => maybe({{ __.maybe_expr(named_item_list) }})(          {% for named_item_list in _.component.named_item_lists %}
          {{ __.get_pipeline(named_item_list).result_expression }}, []
        ),                                                                                                      {% endfor %}
        myState: () => state,                                                                                   {% if __.state %}
        containerItems: () => maybe({{ __.maybe_expr(container.named_item_list) }}, [])(                        {% if container.named_item_list %}
          state.myContainer.data.containerItemsDisplay),                                                        {% endif %}
        containerItem: () => maybe({{ __.maybe_expr(container.named_item_list) }})(                             {% if container.get_bvr("highlight") %}
          state.myContainer.highlight.item),                                                                    {% endif %}
        containerItemsHighlight: () => state.myContainer.highlight,                                             {% ?? container.get_bvr("highlight") %}
        containerItemsSelection: () => state.myContainer.selection,                                             {% ?? container.get_bvr("selection") %}
        containerItemsFiltering: () => state.myContainer.filtering,                                             {% ?? container.get_bvr("filtering") %}
        containerItemsDeletion: () => state.myContainer.deletion,                                               {% ?? container.get_bvr("deletion") %}
        containerItemsDragAndDrop: () => state.myContainer.dragAndDrop,                                         {% ?? container.get_bvr("dragAndDrop") %}{% endif %}
      };

                                                                                                                              {% endfor %}
      return result;
    };

    return (
      <NestedDefaultPropsContext value={getDefaultPropsContext()}>
        {props.children}
      </NestedDefaultPropsContext>
    );
  }, DefaultProps)
);
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
