{% magic_with __.state.name as MyState %}
{% magic_with query.name as myQuery %}
{% magic_with mutation.name as myMutation %}
{% magic_with container.item_name as containerItem %}
{% magic_with container.name as myContainer %}
import React from 'react';
import * as R from 'ramda';
import { observer } from 'mobx-react-lite';
import { lookUp } from 'src/utils/ids';
import { reaction } from 'mobx';
import { log } from 'src/utils/logging';
import { flags } from 'src/app/flags';
import { MyState } from 'src/{{ __.state.state_provider.module.module_path }}/MyState';                                     {% ?? __.state %}
import { useMyQuery } from 'src/api/queries';                                                                               {% for query in __.queries %}{% endfor %}
import { useMyMutation } from 'src/api/mutations';                                                                          {% for mutation in __.mutations %}{% endfor %}

import {
  NestedDefaultPropsContext,
  withDefaultProps
} from 'react-default-props-context';
import { useStore } from 'src/app/components';

type PropsT = React.PropsWithChildren<{}>;

const DefaultProps = {
    ...dps.{{ item.ts_var }},                                                                                               {% for item in __.input_items %}
    ...dps.{{ item.ts_var }}RS,                                                                                             {% endfor %}
    ...dps.{{ item_list.ts_var }},                                                                                          {% for item_list in __.input_item_lists %}
    ...dps.{{ item_list.ts_var }}RS,                                                                                        {% endfor %}
};

export const {{ _.component.name }} = observer(
  withDefaultProps((props: PropsT & typeof DefaultProps) => {
    const myQuery = useMyQuery();                                                                                           {% !! query in __.queries %}
    const myMutation = useMyMutation();                                                                                     {% !! mutation in __.mutations %}

    const [state] = React.useState(() => new MyState({}));                                                                  {% if __.state %}

    (React.useEffect as any)(() => {
      const cleanUpReaction = reaction(
        () => {
          return {
            {{ pipeline.output_name }}: {{ pipeline.result_expression }},                                                   {% !! pipeline in __.pipelines %}
          }
        },
        (inputs) => {
          state.myContainer.data.containerItems = inputs.{{ pipeline.output_name }};                                        {% !! container, pipeline in __.pipeline_by_container %}
          if (flags.logStateProviders) {
            log('MyState updated', state.getSummary());
          }
        },
        {
          fireImmediately: true,
        }
      );
      return () => {
        cleanUpReaction();
        state.destroy();
      };
    });                                                                                                                     {% endif %}

    const getDefaultPropsContext = () => {
      return {
        defaultProps: {
          {{ named_item.typ.item_name }}: () => {{ __.get_pipeline(named_item).result_expression }}                         {% !! named_item in _.component.named_items %}
          {{ named_item_list.typ.item_name|plural }}: () => {{ __.get_pipeline(named_item_list).result_expression }}        {% !! named_item in _.component.named_item_lists %}
          myState: () => state,                                                                                             {% if __.state %}
          containerItems: () => state.myContainer.data.containerItemsDisplay,                                               {% for container in __.state.containers %}
          containerItemsHighlight: () => state.myContainer.highlight,                                                       {% ?? container.get_bvr("highlight") %}
          containerItem: () => state.myContainer.highlight.item,                                                            {% ?? container.get_bvr("highlight") %}
          containerItemsSelection: () => state.myContainer.selection,                                                       {% ?? container.get_bvr("selection") %}
          containerItemsFiltering: () => state.myContainer.filtering,                                                       {% ?? container.get_bvr("filtering") %}
                                                                                                            {% endfor %}{% endif %}
        }
      };
    };

    return (
      <NestedDefaultPropsContext value={getDefaultPropsContext()}>
        {props.children}
      </NestedDefaultPropsContext>
    );
  }, DefaultProps)
);
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
