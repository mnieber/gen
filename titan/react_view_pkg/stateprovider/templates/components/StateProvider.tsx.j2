{% magic_with __.state.name as MyState %}
{% magic_with query.name as myQuery %}
{% magic_with mutation.name as myMutation %}
{% magic_with pipeline.output.item_name as myItem %}
import React from 'react';
import * as R from 'ramda';
import { observer } from 'mobx-react-lite';
import { lookUp } from 'src/utils/ids';
import { reaction } from 'mobx';
import { log } from 'src/utils/logging';
import { flags } from 'src/app/flags';
import { MyState } from 'src/{{ __.state.state_provider.module.module_path }}/MyState';             {% ?? __.state %}
import { useMyQuery } from 'src/api/queries';                                                       {% for query in __.queries %}{% endfor %}
import { useMyMutation } from 'src/api/mutations';                                                  {% for mutation in __.mutations %}{% endfor %}

import {
  NestedDefaultPropsContext,
  withDefaultProps
} from 'react-default-props-context';
import { useStore } from 'src/app/components';

type PropsT = React.PropsWithChildren<{}>;

const DefaultProps = {
    ...dps.{{ item.ts_var }},                                                                       {% for item in __.input_items %}
    ...dps.{{ item.ts_var }}RS,                                                                     {% endfor %}
    ...dps.{{ item_list.ts_var }},                                                                  {% for item_list in __.input_item_lists %}
    ...dps.{{ item_list.ts_var }}RS,                                                                {% endfor %}
};

export const {{ _.component.name }} = observer(
  withDefaultProps((props: PropsT & typeof DefaultProps) => {
    const myQuery = useMyQuery();                                                                   {% for query in __.queries %}{% endfor %}
    const myMutation = useMyMutation();                                                             {% for mutation in __.mutations %}{% endfor %}

    const [state] = React.useState(() => new MyState({}));                                          {% if __.state %}

    (React.useEffect as any)(() => {
      const cleanUpReaction = reaction(
        () => {
          return {
            {{ pipeline.output.ts_var }}: {{ pipeline.input_expression }},                          {% for pipeline in __.pipelines %}{% ?? pipeline.bvrs %}{% endfor %}
          }
        },
        (inputs) => {
          state.inputs.{{ pipeline.output.ts_var }} = inputs.{{ pipeline.output.ts_var }};          {% for pipeline in __.pipelines %}{% ?? pipeline.bvrs %}{% endfor %}
          if (flags.logStateProviders) {
            log('MyState updated', state.getSummary());
          }
        },
        {
          fireImmediately: true,
        }
      );
      return () => {
        cleanUpReaction();
        state.destroy();
      };
    });                                                                                             {% endif %}

    const getDefaultPropsContext = () => {
      return {
        defaultProps: {
          myState: () => state,                                                                     {% ?? __.state %}
        }
      };
    };

    return (
      <NestedDefaultPropsContext value={getDefaultPropsContext()}>
        {props.children}
      </NestedDefaultPropsContext>
    );
  }, DefaultProps)
);
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
