      deleteContainerItems: (ids: string[]) => {                                                                {% for container, data in __.data_by_container %}{% with d = __.delete_items_data(container) %}{% if d.deletes_items %}
        R.map(setToUpdating, lookUp(ids, state.containerItems.data.containerItemById));
        return {{ d.deleteMyItems }}.mutateAsync({ {{ d.myItemIds }}: ids });                                   {% if d.get('deleteMyItems') %}
        return Promise.all(R.map(                                                                               {% else %}
          (x: string) => {{ d.deleteMyItem }}.mutateAsync({ {{ d.myItemId }}: x }),
          ids));                                                                                                {% endif %}
      },                                                                                                        {% endif %}{% endwith %}
      saveContainerItemOrdering: (containerItems: ContainerItemT[]) => {                                        {% with d = __.order_items_data(container) %}{% if d.orders_items %}
        return {{ d.orderMyItems }}.mutateAsync({
          // {{ otherKey }}: Moonleap Todo,                                                                     {% !! otherKey in d.otherKeys %}
          {{ d.myItemIds }}: getIds({{ d.myItems }}),
        });
      },                                                                                                        {% endif %}{% endwith %}{% endfor %}
