{% magic_with containerItem         = container.item.item_name %}
{% magic_with deleteMyCtrItems      = container.delete_items_mutation.name %}
{% magic_with deleteMySingleCtrItem = container.delete_item_mutation.name %}
{% magic_with idsThatAreReordered   = container.order_items_mutation.get_field_name(["uuid[]"]) %}
{% magic_with idsToBeDeleted        = container.delete_items_mutation.get_field_name(["uuid[]"]) %}
{% magic_with idToBeDeleted         = container.delete_item_mutation.get_field_name(["uuid", "string"]) %}
{% magic_with myMutation            = mutation.name %}
{% magic_with MyState               = _.state.name %}
{% magic_with MyType                = type_spec.type_name %}
{% magic_with orderMyCtrItems       = container.order_items_mutation.name %}
{% magic_with saveMyCtrItem         = container.save_item_mutation.name %}
import * as R from 'ramda';
import React from 'react';
import { setToUpdating, setToReady } from '/src/api/ResourceState';
import { MyState } from '/src/{{ _.state.module.module_path }}/MyState';
import { useMyMutation, type MyMutationArgsT } from '/src/{{ mutation.api_spec.module_name }}/endpoints';        {% !! mutation in __.mutations %}
import { useMutationData } from '/src/api/hooks';
import { lookUp, getIds } from '/src/utils/ids';
import { ObjT } from '/src/utils/types';
import { MyTypeT } from '/src/api/types/MyTypeT';                                                                {% !! type_spec in __.type_specs_to_import %}

export type PropsT = {};

export const useMyState = (props: PropsT) => {
  const myMutation = useMutationData(useMyMutation());                                                          {% !! mutation in __.mutations|sort(attribute="name") %}

  const [myState] = React.useState(() => {
    return new MyState({
      deleteContainerItems: (ids: string[]) => {                                                                {% for container in _.state.containers %}{% if container.deletion_bvr %}
        const containerItems = lookUp(ids, myState.containerItems.data.containerItemById);
        R.map(setToUpdating, containerItems);
        return deleteMyCtrItems.mutateAsync(                                                                    {% if container.delete_items_mutation %}
          { idsToBeDeleted: ids } as DeleteMyCtrItemsArgsT
        )
        return Promise.all(R.map(                                                                               {% else %}
          (x: string) => deleteMySingleCtrItem.mutateAsync(
            { idToBeDeleted: x } as DeleteMySingleCtrItemArgsT
          ),
          ids))                                                                                                 {% endif %}
          .then((response: ObjT) => {
            R.map(setToReady, containerItems);
            return response;
          });
      },                                                                                                        {% endif %}
      saveContainerItem: (values: ObjT) => {                                                                    {% if container.editing_bvr  %}
        return saveMyCtrItem.mutateAsync(                                                                       {% if container.editing_bvr.mutation %}
          values as SaveMyCtrItemArgsT
        ).then(
          () => { return values.containerItemForm }
        );                                                                                                      {% endif %}
      },                                                                                                        {% endif %}
      saveContainerItemOrdering: (containerItems: ContainerItemT[]) => {                                        {% if container.drag_and_drop_bvr %}
        return orderMyCtrItems.mutateAsync({
          // Moonleap Todo
          idsThatAreReordered: getIds(containerItems),
        } as OrderMyCtrItemsArgsT );
      }                                                                                                         {% endif %}{% endfor %}
    });
  });

  React.useEffect(() => () => myState.destroy(), [myState]);

  return {
    myState,
    myMutation,                                                                                                 {% !! mutation in __.mutations|sort(attribute="name") %}
  };
};
