{% magic_with containerItem         = container.item_name %}
{% magic_with myContainer           = container.name %}
{% magic_with myMutation            = mutation.name %}
{% magic_with myQuery               = query.name %}
{% magic_with MyState               = _.state.name %}
import * as R from 'ramda';
import React from 'react';
import { MyState } from '/src/{{ _.state.module.module_path }}/MyState';
import { trackPromise } from 'mobx-resource-states';
import { useBuilder } from '/src/utils/hooks/useBuilder';
import { useGraftResourceStatesFromMemo } from '/src/utils/hooks/useGraftResourceStatesFromMemo';
import { lookUp } from '/src/utils/ids';
import { ObjT } from '/src/utils/types';

export type PropsT = {};

export const useMyState = (props: PropsT) => {
  const myState = useBuilder<MyState>(() => {
    return new MyState({
                                                                                                                {% for container in _.state.containers %}
      getContainerItems: () => {                                                                                {% if container.store_bvr %}
        return graftResourceStatesFromMemo({
          resources: [] /* MOONLEAP TODO */,
        });
      },                                                                                                        {% endif %}
      deleteContainerItems: (ids: string[]) => {                                                                {% if container.deletion_bvr %}
        const containerItems = lookUp(
          ids,
          myState.myContainerCtr.store.itemById
        );
        return trackPromise({
          name: 'deleteContainerItems',
          states: { updating: containerItems },
          promise: Promise.resolve("MOONLEAP TODO")
        }).result;
      },                                                                                                        {% endif %}
      saveContainerItem: (values: ObjT) => {                                                                    {% if container.edit_bvr and container.item_name  %}
        return Promise.resolve("MOONLEAP TODO");
      },                                                                                                        {% endif %}
      saveContainerItemOrdering: (containerItems: ContainerItemT[]) => {                                        {% if container.drag_and_drop_bvr %}
        return Promise.resolve("MOONLEAP TODO");
      },                                                                                                        {% endif %}
                                                                                                                {% endfor %}
    });
  }) as MyState;

  React.useEffect(() => () => myState.destroy(), [myState]);

  return {
    myState,
  };
};
