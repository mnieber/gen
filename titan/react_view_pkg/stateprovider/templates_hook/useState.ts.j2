{% magic_with mutation.name as myMutation %}
{% magic_with _.state.name as MyState %}
{% magic_with container.item.item_name as containerItem %}
{% magic_with type_spec.type_name as MyType %}
import * as R from 'ramda';
import React from 'react';
import { setToUpdating, setToReady } from 'src/api/ResourceState';
import { MyState } from 'src/{{ _.state.module.module_path }}/MyState';
import { useMyMutation, type MyMutationArgsT } from 'src/{{ mutation.api_spec.module_name }}/endpoints';        {% !! mutation in __.mutations %}
import { useMutationData } from 'src/api/hooks';
import { lookUp, getIds } from 'src/utils/ids';
import { ObjT } from 'src/utils/types';
import { MyTypeT } from 'src/api/types/MyTypeT';                                                                {% !! type_spec in __.type_specs_to_import %}

export type PropsT = {};

export const useMyState = (props: PropsT) => {
  const myMutation = useMutationData(useMyMutation());                                                          {% !! mutation in __.mutations|sort(attribute="name") %}

  const [myState] = React.useState(() => {
    return new MyState({
      deleteContainerItems: (ids: string[]) => {                                                                {% for container in _.state.containers %}{% with d = __.delete_items_data(container) %}{% if d.deletes_items %}
        const containerItems = lookUp(ids, myState.containerItems.data.containerItemById);
        R.map(setToUpdating, containerItems);
        return {{ d.deleteMyCtrItems }}.mutateAsync(                                                            {% if d.get('deleteMyCtrItems') %}
          { {{ d.myCtrItemIds }}: ids } as {{ d.deleteMyCtrItems|u0 }}ArgsT
        )
        return Promise.all(R.map(                                                                               {% else %}
          (x: string) => {{ d.deleteMyCtrItem }}.mutateAsync(
            { {{ d.myCtrItemId }}: x } as {{ d.deleteMyCtrItem|u0 }}ArgsT
          ),
          ids))                                                                                                 {% endif %}
          .then((response: ObjT) => {
            R.map(setToReady, containerItems);
            return response;
          });
      },                                                                                                        {% endif %}{% endwith %}
      saveContainerItem: (values: ObjT) => {                                                                    {% with d = __.save_item_data(container) %}{% if d.saves_item %}
        return {{ d.saveMyCtrItem }}.mutateAsync(
          values as {{ d.saveMyCtrItem|u0 }}ArgsT
        ).then(
          () => { return values.containerItemForm }
        );
      },                                                                                                        {% endif %}{% endwith %}
      saveContainerItemOrdering: (containerItems: ContainerItemT[]) => {                                        {% with d = __.order_items_data(container) %}{% if d.orders_items %}
        return {{ d.orderMyCtrItems }}.mutateAsync({
          // {{ otherKey }}: Moonleap Todo,                                                                     {% !! otherKey in d.otherKeys %}
          {{ d.myCtrItemIds }}: getIds({{ d.myCtrItems }}),
        } as {{ d.orderMyCtrItems|u0 }}ArgsT );
      }                                                                                                         {% endif %}{% endwith %}{% endfor %}
    });
  });

  React.useEffect(() => () => myState.destroy(), [myState]);

  return {
    myState,
    myMutation,                                                                                                 {% !! mutation in __.mutations|sort(attribute="name") %}
  };
};
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
