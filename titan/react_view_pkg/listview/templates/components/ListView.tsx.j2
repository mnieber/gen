{% magic_with _.component.item_name as fooItem %}
{% magic_with _.component.name as FooListView %}
{% magic_with _.component.module.name as myReactModule %}
{% magic_with field_name as redRose %}
import { cn } from 'src/utils/classnames';
import * as R from 'ramda';
import { dragState } from 'skandha-facets/DragAndDrop';                                         {% ?? __.drag_and_drop_bvr %}
import { observer } from 'mobx-react-lite';
import { defaultProps as dps, withDefaultProps } from 'src/app/defaultProps';
import { FooItemListViewItem } from 'src/myReactModule/components/FooItemListViewItem';
import { FooItemT } from 'src/api/types/FooItemT';
import { getResourceView } from 'src/utils/components';
import { isLoaded } from 'src/api/loadingState';
import { Deletion } from 'skandha-facets/Deletion';                                             {% ?? __.deletion_bvr %}
import { Highlight } from 'skandha-facets/Highlight';                                           {% ?? __.selection_bvr %}
import { Selection } from 'skandha-facets/Selection';                                           {% if __.selection_bvr %}
import { ClickToSelectItems } from 'skandha-facets/handlers';                                   {% endif %}
import UIkit from 'uikit';
import './FooItemListView.scss';

type PropsT = {
  className?: any;
};

const DefaultProps = {
  ...dps.fooItems,
  ...dps.fooItemsDeletion,                                                                      {% ?? __.deletion_bvr %}
  ...dps.fooItemsDragAndDrop,                                                                   {% ?? __.drag_and_drop_bvr %}
  ...dps.fooItemsHighlight,                                                                     {% ?? __.selection_bvr %}
  ...dps.fooItemsSelection,                                                                     {% ?? __.selection_bvr %}
};

export const FooListView = observer(
  withDefaultProps((props: PropsT & typeof DefaultProps) => {
    if (!isLoaded(props.fooItems)) {
      return UIkit && <div data-uk-spinner className=""></div>;                                 {% ?? _.service.uikit %}
      return null;                                                                              {% ?? not _.service.uikit %}
    }

    const handleClick = new ClickToSelectItems({                                                {% if __.selection_bvr %}
      selection: props.fooItemsSelection
    });                                                                                         {% endif %}

    const fooItemDivs = R.pipe(
      R.always(props.fooItems),
      R.map((fooItem: FooItemT) => {
        return (
          <FooListViewItem
            key={fooItem.id}
            fooItem={fooItem}
            isSelected={fooItem && props.fooItemsSelection.ids.includes(fooItem.id)}            {% ?? __.selection_bvr %}
            isHighlighted={fooItem && props.fooItemsHighlight.id === fooItem.id}                {% ?? __.selection_bvr %}
            dragState={dragState(props.fooItemsDragAndDrop.hoverPosition, fooItem.id)}          {% ?? __.drag_and_drop_bvr %}
            onDelete={() => props.fooItemsDeletion.delete([fooItem.id])}                        {% ?? __.deletion_bvr %}
            {...handleClick.handle(fooItem.id)}                                                 {% ?? __.selection_bvr %}
            {...props.fooItemsDragAndDrop.handle(fooItem.id)}                                   {% ?? __.drag_and_drop_bvr %}
          />
        );
      })
    )();

    const noItems = <h2>There are no fooItems</h2>;

    return (
      <div
        className={cn(
          'FooItemListView', 'flex flex-col',
          props.className
        )}
      >
        {fooItemDivs.length > 0 && fooItemDivs}
        {fooItemDivs.length === 0 && noItems}
      </div>
    );
  }, DefaultProps)
);
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
