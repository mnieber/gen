{% magic_with _.component.item_name as yellowTulip %}
{% magic_with _.component.name as blueDaisy %}
{% magic_with _.component.module.name as gardenFlowers %}
{% magic_with field_name as redRose %}
{% clean_up_js_imports %}
import classnames from 'classnames';
import * as R from 'ramda';
import { observer } from 'mobx-react-lite';
import { withDefaultProps } from 'react-default-props-context';
import { YellowTulipListViewItem } from 'src/gardenFlowers/components';
import { YellowTulipT } from 'src/api/types/YellowTulipT';
import { getResourceView } from 'src/utils/components';

import { Deletion } from 'skandha-facets/Deletion';                                               {% if _.deletion_bvr %}{% endif %}
import { Highlight } from 'skandha-facets/Highlight';                                             {% if _.highlight_bvr %}{% endif %}
import { Selection } from 'skandha-facets/Selection';                                             {% if _.selection_bvr %}
import { ClickToSelectItems } from 'skandha-facets/handlers';                                     {% endif %}

{% end_clean_up_js_imports %}

import './YellowTulipListView.scss';

type PropsT = {
  className?: any;
};

type DefaultPropsT = {
  yellowTulips: YellowTulipT[],
  yellowTulipsRS: string,
  yellowTulipsDeletion: Deletion,                                                                 {% if _.deletion_bvr %}{% endif %}
  yellowTulipsHighlight: Highlight,                                                               {% if _.highlight_bvr %}{% endif %}
  yellowTulipsSelection: Selection,                                                               {% if _.selection_bvr %}{% endif %}
};

export const BlueDaisy = observer(
  withDefaultProps<PropsT, DefaultPropsT>((props: PropsT & DefaultPropsT) => {
    const resourceView =
      props.yellowTulipsRS === 'loading' ? <div>Loading...</div> : undefined;
    if (resourceView) return resourceView;

    const handlerClick = new ClickToSelectItems({                                                 {% if _.selection_bvr %}
      selection: props.yellowTulipsSelection
    });                                                                                           {% endif %}

    const yellowTulipDivs = R.pipe(
      R.always(props.yellowTulips),
      R.map((x: YellowTulipT) => {
        return (
          <BlueDaisyItem
            key={x.id}
            yellowTulip={x}
            className={classnames({                                                               {% if _.selection_bvr or _.highlight_bvr %}
              'BlueDaisyItem--selected': x && props.yellowTulipsSelection.ids.includes(x.id),     {% if _.selection_bvr %}{% endif %}
              'BlueDaisyItem--highlighted': x && props.yellowTulipsHighlight.id == x.id,          {% if _.highlight_bvr %}{% endif %}
            })}                                                                                   {% endif %}
            onDelete={() => props.yellowTulipsDeletion.delete([x.id])}                            {% if _.deletion_bvr %}{% endif %}
            {...handlerClick.handle(x.id)}                                                        {% if _.selection_bvr %}{% endif %}
          />
        );
      })
    )();

    const noItems = <h2>There are no yellowTulips</h2>;

    return (
      <div
        className={classnames(
          'YellowTulipListView', 'flex flex-col w-full',
          props.className
        )}
      >
        {yellowTulipDivs.length > 0 && yellowTulipDivs}
        {yellowTulipDivs.length === 0 && noItems}
      </div>
    );
  })
);
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
