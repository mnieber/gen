{% magic_with _.component.name as myComponent %}
{% magic_with component.module.module_path as myChildComponentPath %}
{% magic_with component.name as myChildComponent %}
{% magic_with _.component.item_name as myItem %}
import { defaultProps as dps, withDefaultProps } from 'src/app/defaultProps';
import { cn } from 'src/utils/classnames';
import { observer } from 'mobx-react-lite';
import { isLoaded, isUpdating } from 'src/api/ResourceState';
import UIkit from 'uikit';                                                                          {% ?? _.service.uikit %}
import './MyComponent.scss';
{# Start: view imports here #}
import * as R from 'ramda';
import { dragState } from 'skandha-facets/DragAndDrop';                                             {% ?? __.drag_and_drop_bvr %}
import { MyItemT } from 'src/api/types/MyItemT';
import { Deletion } from 'skandha-facets/Deletion';                                                 {% ?? __.deletion_bvr %}
import { Highlight } from 'skandha-facets/Highlight';                                               {% ?? __.selection_bvr %}
import { Selection } from 'skandha-facets/Selection';                                               {% if __.selection_bvr %}
import { ClickToSelectItems } from 'skandha-facets/handlers';                                       {% endif %}
{# End: view imports here #}

import { myChildComponent } from 'src/myChildComponentPath/components';                             {% for component in __.build.components %}{% ?? component.module != _.component.module %}
import { myChildComponent } from 'src/myChildComponentPath/components/myChildComponent';            {% ?? component.module == _.component.module %}{% endfor %}
import {                                                                                            {% min_lines count=3 %}
  {{ css_class }}                                                                                   {% !! css_class in __.build.external_css_classes %}
} from 'src/frames/components';                                                                     {% end_min_lines %}

type PropsT = {                                                                                     {% ?? not __.build.has_children %}
type PropsT = React.PropsWithChildren<{                                                             {% ?? __.build.has_children %}
{# Start: view props here #}
{# End: view props here #}
  className?: any;
}                                                                                                   {% ?? not __.build.has_children %}
}>                                                                                                  {% ?? __.build.has_children %}
{# Start: additional props here #}
{# End: additional props here #}
;

const DefaultProps = {
{# Start: default view props here #}
  ...dps.myItems,
  ...dps.myItemsDeletion,                                                                           {% ?? __.deletion_bvr %}
  ...dps.myItemsDragAndDrop,                                                                        {% ?? __.drag_and_drop_bvr %}
  ...dps.myItemsHighlight,                                                                          {% ?? __.selection_bvr %}
  ...dps.myItemsSelection,                                                                          {% ?? __.selection_bvr %}
{# End: default view props here #}
};

export const MyComponent = observer(
  withDefaultProps((props: PropsT & typeof DefaultProps) => {
{# Start: view body here #}
    if (!isLoaded(props.myItems)) {
      return UIkit && <div data-uk-spinner className=""></div>;                                     {% ?? _.service.uikit %}
      return null;                                                                                  {% ?? not _.service.uikit %}
    }

    const handleClick = new ClickToSelectItems({                                                    {% if __.selection_bvr %}
      selection: props.myItemsSelection
    });                                                                                             {% endif %}

    const myItemDivs = R.pipe(
      R.always(props.myItems),
      R.map((myItem: MyItemT) => {
        return (
          <MyComponentItem
            key={myItem.id}
            myItem={myItem}
            isSelected={myItem && props.myItemsSelection.ids.includes(myItem.id)}                   {% ?? __.selection_bvr %}
            isHighlighted={myItem && props.myItemsHighlight.id === myItem.id}                       {% ?? __.selection_bvr %}
            dragState={dragState(props.myItemsDragAndDrop.hoverPosition, myItem.id)}                {% ?? __.drag_and_drop_bvr %}
            onDelete={() => props.myItemsDeletion.delete([myItem.id])}                              {% ?? __.deletion_bvr %}
            {...handleClick.handle(myItem.id)}                                                      {% ?? __.selection_bvr %}
            {...props.myItemsDragAndDrop.handle(myItem.id)}                                         {% ?? __.drag_and_drop_bvr %}
          />
        );
      })
    )();

    const noItems = <h2>There are no myItems</h2>;

{# End: view body here #}
    return (
{{ __.build.div }}
    );
  }, DefaultProps)
);

{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
