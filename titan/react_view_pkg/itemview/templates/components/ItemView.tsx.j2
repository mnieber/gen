{% magic_with _.component.item_name as fooItem %}
{% magic_with field_spec.name as fieldSpecName %}
import { observer } from 'mobx-react-lite';
import { defaultProps as dps, withDefaultProps } from 'src/app/defaultProps';
import { cn } from 'src/utils/classnames';
import { isLoaded } from 'src/api/ResourceState';
import { {{ type_spec.type_name }}T } from 'src/api/types/{{ type_spec.type_name }}T';          {% !! type_spec in __.type_specs_to_import %}
import './{{ _.component.name }}.scss';
import UIkit from 'uikit';

type PropsT = {
  {{ item.ts_var }}: {{ item.ts_type }}                                                         {% !! item in __.data.prop_items %}
  {{ item_list.ts_var }}: {{ item_list.ts_type }}                                               {% !! item_list in __.data.prop_item_lists %}
  className?: any;
};

const DefaultProps = {
  ...dps.fooItem,
};

export const FooItemView = observer(
  withDefaultProps((props: PropsT & typeof DefaultProps) => {
    if (!props.fooItem) {
      return !isLoaded(props.fooItem)                                                       {% if _.service.uikit %}
        ? UIkit && <div data-uk-spinner className=""></div>
        : null;                                                                             {% endif %}
      return null;                                                                          {% ?? not _.service.uikit %}
    }

    return (
      <div className={cn("FooItemView", "flex flex-col", props.className)}>
        <div>                                                                               {% for field_spec in __.fields %}
          fieldSpecName: {props.fooItem.fieldSpecName}                                      {% ?? field_spec.field_type not in ("boolean",) %}
          fieldSpecName: {props.fooItem.fieldSpecName ? 'Yes' : 'No'}                       {% ?? field_spec.field_type in ("boolean",) %}
        </div>                                                                              {% endfor %}
      </div>
    );
  }, DefaultProps)
);
{% end_magic_with %}
{% end_magic_with %}
