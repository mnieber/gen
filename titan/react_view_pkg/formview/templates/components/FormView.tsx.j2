{% magic_with _.component.name as YellowTulipFormView %}
{% magic_with __.mutation.name as postRedRose %}
{% magic_with field_spec.ts_type as fieldSpecTsType %}
{% magic_with field_spec.ts_default_value as fieldSpecTsDefaultValue %}
{% magic_with field_spec.target as FieldSpecTarget %}
import React from 'react';
import * as R from 'ramda';
import { observer } from 'mobx-react-lite';
import { defaultProps as dps, withDefaultProps } from 'src/app/defaultProps';
import {
  FormStateProvider,
  HandleValidateArgsT,
  HandleSubmitArgsT,
  unflatten
} from 'react-form-state-context';
import { usePostRedRose } from 'src/api/mutations';
import {
  ControlledCheckbox,
  Field,
  GlobalError,
  TextField,
  SaveButton,
  SlugField,
  UpdateSlugButton,
  ValuePickerField
} from 'src/forms/components';
import { cn } from 'src/utils/classnames';
import { fieldSpecTsType } from 'src/api/types/fieldSpecTsType'                                         {% for name, field_spec in __.fields %}{% ?? field_spec.field_type in ("uuid",) and field_spec.target %}{% endfor %}

import './YellowTulipFormView.scss';

type PropsT = {};

const DefaultProps = {
  ...dps.fieldSpecTargets,                                                                              {% for name, field_spec in __.fields %}{% ?? field_spec.field_type in ("uuid",) and field_spec.target %}{% endfor %}
};

export const YellowTulipFormView = observer(
  withDefaultProps((props: PropsT & typeof DefaultProps) => {
    const postRedRose = usePostRedRose().mutateAsync;

    const initialValues = {
      '{{ name }}': fieldSpecTsDefaultValue,                                                           {% for name, field_spec in __.fields %}{% ?? not field_spec.field_type == "uuid" %}{% endfor %}
    };
    const initialErrors = {};
    const handleValidate = ({values, setError} : HandleValidateArgsT) => {
      if (R.isNil(values['{{ name }}'])) {                                                              {% for name, field_spec in __.validated_fields %}
        setError('{{ name }}', 'This field is required');
      }                                                                                                 {% endfor %}
    };
    const handleSubmit = ({ formState, values }: HandleSubmitArgsT) => {
      postRedRose({...unflatten(values)});
      formState.reset(initialValues, initialErrors);
    };

    return (
      <div
        className={cn(
          "YellowTulipFormView",
          "flex flex-col items-center",
          "w-full"
        )}>
        <FormStateProvider
          initialValues={initialValues}
          initialErrors={initialErrors}
          handleValidate={handleValidate}
          handleSubmit={handleSubmit}
        >
          <GlobalError />
          <Field                                                                                        {% for name, field_spec in __.fields %}
            fieldName="{{ name }}"
            label="{{ __.label(name) }}"
            buttons={[                                                                                  {% if field_spec.field_type in ("slug",) %}
              <UpdateSlugButton
                key="1"
                relatedFieldName="{{ __.slug_src(field_spec) }}"
              />
            ]}                                                                                          {% endif %}
          >
            <TextField controlled={true} />                                                             {% ?? field_spec.field_type in ("string", "text", "url") %}
            <SlugField />                                                                               {% ?? field_spec.field_type in ("slug",) %}
            <ValuePickerField                                                                           {% if field_spec.field_type in ("uuid",) and field_spec.target %}
              isCreatable={false}
              isMulti={false}
              pickableValues={props.fieldSpecTargets}
              labelFromValue={(x: any) => x.{{ __.display_field_name(field_spec.target_type_spec) }}}
            />                                                                                          {% endif %}
            <ControlledCheckbox />                                                                      {% ?? field_spec.field_type in ("boolean",) %}
          </Field>                                                                                      {% endfor %}
          <SaveButton
            label="Save"
            disabled={false}
          />
        </FormStateProvider>
      </div>
    );
  }, DefaultProps)
);
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
