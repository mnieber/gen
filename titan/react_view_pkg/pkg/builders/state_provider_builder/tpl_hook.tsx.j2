{% magic_with query.name as myQuery %}
{% magic_with mutation.name as myMutation %}
{% magic_with state.name as MyState %}
{% magic_with container.item.item_name as containerItem %}


{% section imports %}
import * as R from 'ramda';
import React from 'react';
import { setToUpdating } from 'src/api/ResourceState';
import { MyState } from 'src/{{ state.module.module_path }}/MyState';                           {% !! state in states %}
import { useMyQuery } from 'src/{{ query.api_spec.module_name }}/endpoints';                    {% !! query in queries %}
import { useMyMutation } from 'src/{{ mutation.api_spec.module_name }}/endpoints';              {% !! mutation in mutations %}
import { useMutationData, useQueryData } from 'src/api/hooks';
import { lookUp, getIds } from 'src/utils/ids';
import { ObjT } from 'src/utils/types';
{% end_section %}


{% section preamble_hooks %}
    const myQuery = useQueryData(useMyQuery());                                                                 {% !! query in queries %}
    const myMutation = useMutationData(useMyMutation());                                                        {% !! mutation in mutations %}

    const [myState] = React.useState(() => new MyState({                                                        {% for state in states %}
      deleteContainerItems: (ids: string[]) => {                                                                {% for container in state.containers %}{% with d = delete_items_data(container) %}{% if d.deletes_items %}
        R.map(setToUpdating, lookUp(ids, myState.containerItems.data.containerItemById));
        return {{ d.deleteMyCtrItems }}.mutateAsync({ {{ d.myCtrItemIds }}: ids });                             {% if d.get('deleteMyCtrItems') %}
        return Promise.all(R.map(                                                                               {% else %}
          (x: string) => {{ d.deleteMyCtrItem }}.mutateAsync({ {{ d.myCtrItemId }}: x }),
          ids));                                                                                                {% endif %}
      },                                                                                                        {% endif %}{% endwith %}
      saveContainerItem: (values: ObjT) => {                                                                    {% with d = save_item_data(container) %}{% if d.saves_item %}
        return {{ d.saveMyCtrItem }}.mutateAsync(values).then(
          () => { return values.containerItemForm }
        );
      },                                                                                                        {% endif %}{% endwith %}
      saveContainerItemOrdering: (containerItems: ContainerItemT[]) => {                                        {% with d = order_items_data(container) %}{% if d.orders_items %}
        return {{ d.orderMyCtrItems }}.mutateAsync({
          // {{ otherKey }}: Moonleap Todo,                                                                     {% !! otherKey in d.otherKeys %}
          {{ d.myCtrItemIds }}: getIds({{ d.myCtrItems }}),
        });
      }                                                                                                         {% endif %}{% endwith %}{% endfor %}
    }));
{% end_section %}


{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
