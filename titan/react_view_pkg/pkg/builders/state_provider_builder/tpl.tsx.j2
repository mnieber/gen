{% magic_with query.name as myQuery %}
{% magic_with mutation.name as myMutation %}
{% magic_with state.name as MyState %}
{% magic_with container.item.item_name as containerItem %}
{% magic_with named_item_list.typ.item_name as myListItem %}
{% magic_with named_item.typ.item_name as myItem %}
{% magic_with container.name as myContainer %}



{% section imports %}
import { observer } from 'mobx-react-lite';
import * as R from 'ramda';
import React from 'react';
import { NestedDefaultPropsContext } from 'react-default-props-context';
import { maybe, initRS, setToUpdating } from 'src/api/ResourceState';
import { MyState } from 'src/{{ state.state_provider.module.module_path }}/MyState';            {% ?? state %}
import { {{ type_spec.type_name }}T } from 'src/api/types/{{ type_spec.type_name }}T';          {% !! type_spec in more_type_specs_to_import %}
import { useMyQuery } from 'src/api/queries';                                                   {% !! query in queries %}
import { useMyMutation } from 'src/api/mutations';                                              {% !! mutation in mutations %}
import { dps, withDefaultProps } from 'src/app/defaultProps';
import { flags } from 'src/app/flags';
import { useUpdateStateReaction } from 'src/frames/hooks/useUpdateStateReaction';
import { lookUp, getIds } from 'src/utils/ids';
import { log } from 'src/utils/logging';
import { ObjT } from 'src/utils/types';
{% end_section %}


{% section preamble_hooks %}
    const myQuery = useMyQuery();                                                                               {% !! query in queries %}
    const myMutation = useMyMutation();                                                                         {% !! mutation in mutations %}

    const [state] = React.useState(() => new MyState({                                                          {% if state %}
      deleteContainerItems: (ids: string[]) => {                                                                {% for container in containers %}{% with d = delete_items_data(container) %}{% if d.deletes_items %}
        R.map(setToUpdating, lookUp(ids, state.containerItems.data.containerItemById));
        return {{ d.deleteMyCtrItems }}.mutateAsync({ {{ d.myCtrItemIds }}: ids });                             {% if d.get('deleteMyCtrItems') %}
        return Promise.all(R.map(                                                                               {% else %}
          (x: string) => {{ d.deleteMyCtrItem }}.mutateAsync({ {{ d.myCtrItemId }}: x }),
          ids));                                                                                                {% endif %}
      },                                                                                                        {% endif %}{% endwith %}
      saveContainerItem: (values: ObjT) => {                                                                    {% with d = save_item_data(container) %}{% if d.saves_item %}
        // Moonleap Todo: convert from values to containerItem form
        return {{ d.saveMyCtrItem }}.mutateAsync(values);
      },                                                                                                        {% endif %}{% endwith %}
      saveContainerItemOrdering: (containerItems: ContainerItemT[]) => {                                        {% with d = order_items_data(container) %}{% if d.orders_items %}
        return {{ d.orderMyCtrItems }}.mutateAsync({
          // {{ otherKey }}: Moonleap Todo,                                                                     {% !! otherKey in d.otherKeys %}
          {{ d.myCtrItemIds }}: getIds({{ d.myCtrItems }}),
        });
      },                                                                                                        {% endif %}{% endwith %}{% endfor %}
    }));                                                                                                        {% endif %}

    useUpdateStateReaction({
      getInputs: () => {
        return {
          {{ container_input.typ.ts_var }}: {{ get_data_path(container_input) }},                             {% !! container_input in get_container_inputs(containers) %}
        }
      },
      updateState: (inputs) => {
        R.forEach(initRS, inputs.myListItems ?? []);                                                          {% for container in containers %}{% for named_item_list in get_container_inputs([container], named_items=False) %}
        state.myContainer.data.myListItems = inputs.myListItems ?? [];
        {{ "" }}                                                                                              {% endfor %}
        state.myContainer.data.myItem = inputs.myItem;                                                        {% !! named_item in get_container_inputs([container], named_item_lists=False) %}{% endfor %}
        if (flags.logStateProviders) {
          log('MyState updated', state.getSummary());
        }
      },
      destroyState: () => state.destroy(),
    });
    {{ "" }}
{% end_section %}


{% section preamble %}
    const getDefaultPropsContext = () => {
      const result: any = { defaultProps: {
        myState: () => state,                                                                                   {% ?? state %}
        myItem: () => {{ return_value(named_item) }},                                                           {% !! named_item in state_provider.named_items_provided %}
        myListItems: () => {{ return_value(named_item_list) }},                                                 {% !! named_item_list in state_provider.named_item_lists_provided %}
      } };

      result.defaultProps = {                                                                                   {% for container in state.containers %}
        ...result.defaultProps,
        containerItems: () => {{ get_return_value(container, "items") }},                                       {% ?? container.named_item_list %}
        containerItem: () => {{ get_return_value(container, "highlighted_item") }},                             {% ?? container.get_bvr("highlight") %}
        containerItemsDeletion: () => state.myContainer.deletion,                                               {% ?? container.get_bvr("deletion") %}
        containerItemsDragAndDrop: () => state.myContainer.dragAndDrop,                                         {% ?? container.get_bvr("dragAndDrop") %}
        containerItemsEditing: () => state.myContainer.editing,                                                 {% ?? container.get_bvr("editing") %}
        containerItemsFiltering: () => state.myContainer.filtering,                                             {% ?? container.get_bvr("filtering") %}
        containerItemsHighlight: () => state.myContainer.highlight,                                             {% ?? container.get_bvr("highlight") %}
        containerItemsSelection: () => state.myContainer.selection,                                             {% ?? container.get_bvr("selection") %}
      };
      {{ "" }}                                                                                                  {% endfor %}
      return result;
    };
    {{ "" }}
{% end_section %}


{% section lines %}
      <NestedDefaultPropsContext value={getDefaultPropsContext()}>
        {props.children}
      </NestedDefaultPropsContext>
{% end_section %}


{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
