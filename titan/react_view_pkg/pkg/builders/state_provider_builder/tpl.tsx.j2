{% magic_with state.name as MyState %}
{% magic_with container.item.item_name as containerItem %}
{% magic_with named_item_list.typ.item_name as myListItem %}
{% magic_with named_item.typ.item_name as myItem %}
{% magic_with container.name as myContainer %}
{% magic_with type_spec.type_name as MyType %}


{% section imports %}
import * as R from 'ramda';
import React from 'react';
import { makeAutoObservable } from 'mobx';
import { NestedDefaultPropsContext } from 'react-default-props-context';
import { cloneAndSetState, maybe, initRS } from 'src/api/ResourceState';
import { MyState } from 'src/{{ state.module.module_path }}/MyState';                           {% !! state in states %}
import { useMyState } from 'src/{{ state.module.module_path }}/hooks/useMyState';               {% !! state in states %}
import { dps, withDefaultProps } from 'src/app/defaultProps';
import { flags } from 'src/app/flags';
import { useUpdateStateReaction } from 'src/frames/hooks/useUpdateStateReaction';
import { lookUp, getIds } from 'src/utils/ids';
import { log } from 'src/utils/logging';
import { ObjT } from 'src/utils/types';
{% end_section %}


{% section preamble_hooks %}
    const {                                                                                                     {% for state in states %}
      myState,
    } = useMyState({
    });

    useUpdateStateReaction({
      getInputs: () => ({
        {{ container_input.typ.ts_var }}: {{ get_data_path(container_input) }},                                 {% !! container_input in get_container_inputs(state.containers) %}
      }),
      updateState: (inputs) => {
        myState.myContainer.data.myListItems = inputs.myListItems ?? [];                                        {% for container in state.containers %}{% for named_item_list in get_container_inputs([container], named_items=False) %}
        R.forEach(initRS, myState.myContainer.data.myListItems);

        {{ "" }}                                                                                                {% endfor %}
        myState.myContainer.data.myItem = inputs.myItem;                                                        {% !! named_item in get_container_inputs([container], named_item_lists=False) %}{% endfor %}
      },
      logState: () => {
        log('MyState updated', myState.getSummary());
      },
    });

    const [cache] = React.useState(() =>
      makeAutoObservable({
      })
    );

    {{ "" }}                                                                                                    {% endfor %}
{% end_section %}


{% section preamble %}
    const getDefaultPropsContext = () => {
      const result: any = { defaultProps: {
        myState: () => myState,                                                                                 {% !! state in states %}
        myItem: () => {{ get_return_value(named_item) }},                                                       {% !! named_item in state_provider.named_items_provided %}
        myListItems: () => {{ get_return_value(named_item_list) }},                                             {% !! named_item_list in state_provider.named_item_lists_provided %}
      } };

      result.defaultProps = {                                                                                   {% for state in states%}{% for container in state.containers %}
        ...result.defaultProps,
        containerItems: () => {{ get_return_value(state, container, "items") }},                                {% ?? container.named_item_list %}
        containerItem: () => {{ get_return_value(state, container, "highlighted_item") }},                      {% ?? container.get_bvr("highlight") %}
        containerItemsAddition: () => myState.myContainer.addition,                                             {% ?? container.get_bvr("addition") %}
        containerItemsDeletion: () => myState.myContainer.deletion,                                             {% ?? container.get_bvr("deletion") %}
        containerItemsDragAndDrop: () => myState.myContainer.dragAndDrop,                                       {% ?? container.get_bvr("dragAndDrop") %}
        containerItemsEditing: () => myState.myContainer.editing,                                               {% ?? container.get_bvr("editing") %}
        containerItemsFiltering: () => myState.myContainer.filtering,                                           {% ?? container.get_bvr("filtering") %}
        containerItemsHighlight: () => myState.myContainer.highlight,                                           {% ?? container.get_bvr("highlight") %}
        containerItemsSelection: () => myState.myContainer.selection,                                           {% ?? container.get_bvr("selection") %}
      };
      {{ "" }}                                                                                                  {% endfor %}{% endfor %}
      return result;
    };
    {{ "" }}
{% end_section %}


{% section lines %}
      <NestedDefaultPropsContext value={getDefaultPropsContext()}>
        {props.children}
      </NestedDefaultPropsContext>
{% end_section %}


{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
