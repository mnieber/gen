{% magic_with myEditingBvr = editing_bvr.ts_var %}
{% magic_with myItem = item_name %}


{% section imports %}
import { PickerValueT, ValuePicker } from '/src/utils/components/ValuePicker';
import { useValuePickerState } from '/src/utils/hooks/useValuePickerState';
import { MyItemT } from '/src/api/types/MyItemT';                                {% ?? update_url %}
import { error } from '/src/frames/components/Error';
import { slugify } from '/src/utils';
import { createUUID } from '/src/utils/ids';
{% end_section %}


{% section props %}
    updateUrl?: (myItem: MyItemT) => void;                                      {% ?? update_url %}
{% end_section %}


{% section preamble_hooks %}
    const saveMyItem = props.myEditingBvr.save;                                 {% if editing_bvr %}
    {{ "" }}
    const saveMyItem = usePostMyMutation().mutateAsync;                         {% elif mutation %}
    {{ "" }}                                                                    {% endif %}
    const state = useValuePickerState<MyItemT>({
      values: {{ path_to_items }},
      selection: props.myItemsSelection,                                        {% if bvrs_has_selection %}
      highlight: props.myItemsHighlight,                                        {% elif bvrs_has_highlight %}{% endif %}
      updateUrl: props.updateUrl,
    });
    {{ "" }}
{% end_section %}


{% section preamble %}
    const onChange = (value: PickerValueT) => {
      if (value.__isNew__) {
        const myItemName = value.label;
        const id = createUUID();
        state.setIsUpdating(true);
        saveMyItem({
          // Moonleap Todo
          id: id,
        }).then(() => state.setItemWhenReady({{ path_to_items }}, id));
      } else if (value.value) {
        state.setItem(value.value);
      }
    };
    {{ "" }}
{% end_section %}


{% section lines %}
    {state.isUpdating && <Spinner />                                          {% ?? spinner %}
    <ValuePicker
        isMulti={false}
        isCreatable={true}
        pickableValues={ props.myItems }
        labelFromValue={(x: any) => x.name}
        pickableValue={props.myItemsHighlight.item}
        placeholder="Select myItem"
        onChange={onChange}
    />
    {state.isError && (                                                       {% if save %}
      <div className={cn(error)}>
        Oops, the myItem could not be created
      </div>                                                                  {% endif %}
    )}
{% end_section %}
