{% magic_with myEditingBvr = editing_bvr.ts_var %}
{% magic_with myItem = item_name %}
{% magic_with myField = field.dot_name %}
{% magic_with postMyMutation = mutation.name %}

{% section imports %}
import * as R from 'ramda';
import {
  FormStateProvider,
  HandleValidateArgsT,
  HandleSubmitArgsT,
  HandleCancelArgsT,
  unflatten
} from 'react-form-state-context';
import { createUUID } from 'src/utils/ids';
import { MyItemT } from 'src/api/types/MyItemT';
import { usePostMyMutation } from 'src/{{ mutation.api_spec.module_name }}/endpoints';                  {% ?? mutation %}
{% end_section %}


{% section div_open %}
    <FormStateProvider
        initialValues={initialValues}
        initialErrors={initialErrors}
        handleValidate={handleValidate}
        handleSubmit={handleSubmit}
        handleCancel={handleCancel}
    >
{% end_section %}


{% section div_close %}
    </FormStateProvider>
{% end_section %}


{% section preamble_hooks %}
  const postMyMutation = props.myEditingBvr.save.bind(props.myEditingBvr);                              {% if editing_bvr %}
  const postMyMutation = usePostMyMutation().mutateAsync;                                               {% elif mutation %}
  {{ "" }}                                                                                              {% endif %}
{% end_section %}


{% section preamble %}
    const initialValues = {
      'myField': (                                                                                      {% for field in fields|sort(attribute="name") %}
        props.myItem.{{ field.field_spec.name}}
        ?? {{ get_initial_value(field) }}
      ),{% if field.through %} // Moonleap Todo{% endif %}                                              {% endfor %}
    };
    const initialErrors = {};
    const handleValidate = ({values, setError} : HandleValidateArgsT) => {
      if (R.isNil(values['myField'])) {                                                                 {% for field in validated_fields %}{% if field.field_spec.field_type not in ("uuid",) %}
        setError('myField', 'This field is required');
      }                                                                                                 {% endif %}{% endfor %}
    };
    const handleSubmit = ({ formState, values }: HandleSubmitArgsT) => {
      return postMyMutation(unflatten(                                                                  {% if mutation %}
        {                                                                                               {% if uuid_fields or through_fields %}
          ...values,
          'myField': values['myField'].id,                                                              {% !! field in uuid_fields %}
          '{{ field.prefix }}{{ field.name }}': values['myField'],  // MoonleapTodo                     {% !! field in through_fields|sort(attribute="name") %}
          'myField': undefined,                                                                         {% !! field in through_fields|sort(attribute="name") %}
        }
        values                                                                                          {% else %}{% endif %}
      )).then((
        localMyItem: MyItemT                                                                            {% ?? url_state %}
      ) => {
        formState.reset(initialValues, initialErrors);
        props.urlState.goToMyItem(localMyItem);                                                         {% ?? url_state %}
      });                                                                                               {% endif %}
    };
    const handleCancel = ({ formState }: HandleCancelArgsT) => {
      props.myEditingBvr.cancel();                                                                      {% ?? editing_bvr %}
      props.urlState.goBack();                                                                          {% ?? url_state %}
      console.log("Moonleap Todo");                                                                     {% ?? not editing_bvr %}
    };
    {{ ""}}
{% end_section %}
