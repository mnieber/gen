{% magic_with myEditingBvr = editing_bvr.ts_var %}
{% magic_with myItem = item_name %}
{% magic_with postMyMutation = mutation.name %}

{% section imports %}
import * as R from 'ramda';
import {
  FormStateProvider,
  HandleValidateArgsT,
  HandleSubmitArgsT,
  HandleCancelArgsT,
  unflatten
} from 'react-form-state-context';
import { createUUID } from 'src/utils/ids';
import { usePostMyMutation } from 'src/{{ mutation.api_spec.module_name }}/endpoints';                  {% ?? mutation %}
{% end_section %}


{% section div_open %}
    <FormStateProvider
        initialValues={initialValues}
        initialErrors={initialErrors}
        handleValidate={handleValidate}
        handleSubmit={handleSubmit}
        handleCancel={handleCancel}
    >
{% end_section %}


{% section div_close %}
    </FormStateProvider>
{% end_section %}


{% section preamble_hooks %}
  const postMyMutation = props.myEditingBvr.save.bind(props.myEditingBvr);                              {% if editing_bvr %}
  const postMyMutation = usePostMyMutation().mutateAsync;                                               {% elif mutation %}
  {{ "" }}                                                                                              {% endif %}
{% end_section %}


{% section preamble %}
    const initialValues = {
      '{{ name }}': props.myItem.{{ field_spec.name}} ?? {{ get_initial_value(field_spec) }},           {% !! name, field_spec in fields|sort(attribute=0) %}
    };
    const initialErrors = {};
    const handleValidate = ({values, setError} : HandleValidateArgsT) => {
      if (R.isNil(values['{{ name }}'])) {                                                              {% for name, field_spec in validated_fields %}{% if field_spec.field_type not in ("uuid",) %}
        setError('{{ name }}', 'This field is required');
      }                                                                                                 {% endif %}{% endfor %}
    };
    const handleSubmit = ({ formState, values }: HandleSubmitArgsT) => {
      return postMyMutation(unflatten(                                                                  {% if mutation %}
        {                                                                                               {% if uuid_fields %}
          ...values,
          '{{ name }}': values['{{ name }}'].id,                                                        {% !! name, field_spec in uuid_fields %}
        }
        values                                                                                          {% else %}{% endif %}
      )).then(() => formState.reset(initialValues, initialErrors));                                     {% endif %}
    };
    const handleCancel = ({ formState }: HandleCancelArgsT) => {
      props.myEditingBvr.cancel();                                                                      {% ?? editing_bvr %}
      props.locationState.goBack();                                                                    {% ?? location_state %}
      console.log("Moonleap Todo");                                                                     {% ?? not editing_bvr %}
    };
    {{ ""}}
{% end_section %}
