{% magic_with container.name as myContainer %}
{% magic_with bvr.name as myBvr %}
{% magic_with _.state.name as MyState %}
{% magic_with container.item.item_name as myItem %}
import { makeObservable } from 'mobx';
import { mapDataToProps, pmap } from 'skandha';
import { addCleanUpFunctionToCtr, cleanUpCtr } from 'react-default-props-context';
import * as Skandha from 'skandha';
import * as FacetPolicies from 'skandha-facets/policies';
import { registerCtr } from 'skandha-mobx';
import { MyItemT } from 'src/api/types/MyItemT';                                                        {% !! container in __.containers %}
import { getIds } from 'src/utils/ids';
import { ObjT } from 'src/utils/types';
import * as Facets from 'skandha-facets';
import { Addition, AdditionCbs } from 'skandha-facets/Addition';                                        {% ?? __.import_bvr("addition") %}
import { Deletion, DeletionCbs } from 'skandha-facets/Deletion';                                        {% ?? __.import_bvr("deletion") %}
import { DragAndDrop } from 'skandha-facets/DragAndDrop';                                               {% ?? __.import_bvr("dragAndDrop") %}
import { Editing, EditingCbs } from 'skandha-facets/Editing';                                           {% ?? __.import_bvr("editing") %}
import { Filtering, FilteringCbs } from 'skandha-facets/Filtering';                                     {% ?? __.import_bvr("filtering") %}
import { Highlight, HighlightCbs } from 'skandha-facets/Highlight';                                     {% ?? __.import_bvr("highlight") %}
import { Insertion } from 'skandha-facets/Insertion';                                                   {% ?? __.import_bvr("insertion") %}
import { Selection, SelectionCbs, handleSelectItem } from 'skandha-facets/Selection';                   {% ?? __.import_bvr("selection") %}
import { initMyContainer, MyItemsData } from './myItems';                                               {% !! container in __.containers %}

export type PropsT = {
  deleteMyItems: (ids: string[]) => Promise<any>;                                                       {% for container in __.containers %}{% ?? container.get_bvr("deletion") %}
  saveMyItem: (values: ObjT) => Promise<MyItemT>;                                                       {% ?? container.get_bvr("editing") %}
  saveMyItemOrdering: (myItems: MyItemT[]) => Promise<any>;                                             {% ?? container.get_bvr("dragAndDrop") %}{% endfor %}
};

export class MyState {
  myContainer = {                                                                                       {% for container in __.containers %}
    data: new MyContainerData(),
    myBvr: new MyBvr{% if bvr.has_param %}<MyItemT>{% endif %}(),                                       {% !! bvr in container.bvrs|sort(attribute="name") %}
  }
  {{ "" }}                                                                                              {% endfor %}

  _myContainerMapData(props: PropsT) {                                                                  {% for container in __.containers %}
    const getMyItemById = (x: string | undefined) =>                                                    {% if container.get_bvr("selection") or container.get_bvr("highlight") %}
      x ? this.myContainer.data.myItemById[x] : undefined;
    {{ "" }}                                                                                            {% endif %}
    mapDataToProps(                                                                                     {% min_lines count=3 %}
      pmap(                                                                                             {% if container.get_bvr("selection") %}
        //
        [this.myContainer.selection, 'selectableIds'],
        () => getIds(this.myContainer.data.myItems),                                                    {% ?? not (container.get_bvr("filtering") or container.get_bvr("insertion")) %}
        () => getIds(this.myContainer.data.myItemsDisplay),                                             {% ?? container.get_bvr("filtering") or container.get_bvr("insertion") %}
      ),
      pmap(
        //
        [this.myContainer.selection, 'items'],
        () => this.myContainer.selection.ids.map(getMyItemById as any),
      ),                                                                                                {% endif %}
      pmap(                                                                                             {% if container.get_bvr("highlight") %}
        //
        [this.myContainer.highlight, 'item'],
        () => getMyItemById(this.myContainer.highlight.id)
      ),                                                                                                {% endif %}
      pmap(                                                                                             {% if container.get_bvr("filtering") %}
        //
        [this.myContainer.filtering, 'inputItems'],
        () => this.myContainer.data.myItems,
      ),                                                                                                {% endif %}
      pmap(                                                                                             {% if container.get_bvr("insertion") %}
        //
        [this.myContainer.insertion, 'inputItems'],
        () => this.myContainer.filtering.filteredItems,                                                   {% ?? container.get_bvr("filtering") %}
        () => this.myContainer.data.myItems,                                                            {% ?? not container.get_bvr("filtering") %}
      ),                                                                                                {% endif %}
      pmap(                                                                                             {% if container.get_bvr("addition") and container.get_bvr("insertion") %}
        //
        [this.myItems.insertion, 'preview'],
        () =>
          FacetPolicies.insertionPreviewUsesDragSources(
            [FacetPolicies.DragSourceFromNewItem],
            this.myItems
          )(this.myItems.insertion.inputItems)
      ),                                                                                                {% endif %}
      pmap(                                                                                             {% if container.get_bvr("filtering") or container.get_bvr("insertion") %}
        //
        [this.myContainer.data, 'myItemsDisplay'],
        () => this.myContainer.insertion.preview,                                                       {% ?? container.get_bvr("insertion") %}
        () => this.myContainer.filtering.filteredItems,                                                 {% ?? not container.get_bvr("insertion") %}
      ),                                                                                                {% endif %}
    )                                                                                                   {% end_min_lines %}
  }
  {{ "" }}                                                                                              {% endfor %}
  getSummary() {
    return {
      myContainer: Skandha.getCtrState(this.myContainer),                                               {% !! container in __.containers %}
    }
  }

  destroy() {
    cleanUpCtr(this);
  }

  constructor(props: PropsT) {
    registerCtr({                                                                                       {% for container in __.containers %}
      ctr: this.myContainer,
      options: { name: 'MyState.MyContainer' },
      initCtr: () => {
        initMyContainer(this, props);
        this._myContainerMapData(props);
      },
    });
    {{ "" }}                                                                                            {% endfor %}
  }
}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
