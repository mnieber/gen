{% magic_with __.state.name as myComponent %}
{% magic_with query.name as myQuery %}
{% magic_with mutation.name as myMutation %}
{% magic_with pipeline.output.item_name as myItem %}

import * as React from 'react';                                                                   {% clean_up_js_imports %}
import * as R from 'ramda';
import { observer } from 'mobx-react-lite';
import { lookUp } from 'src/utils/ids';

import { reaction } from 'mobx';                                                                  {% if _.has_behaviors %}
import { log } from 'src/utils/logging';
import { flags } from 'src/app/flags';
import { MyComponentState } from '{{ _.component.module.module_path }}/MyComponentState';         {% endif %}

import { {{ item.ts_type }} } from 'src/api/types/{{ item.item_type.name }}T';                    {% for item in _.input_items %}{% endfor %}
import { {{ item_list.item.ts_type }} } from 'src/api/types/{{ item_list.item_type.name }}T';     {% for item_list in _.input_item_lists %}{% endfor %}
import { useMyQuery } from 'src/api/queries';                                                     {% for query in _.queries %}{% endfor %}
import { useMyMutation } from 'src/api/mutations';                                                {% for mutation in _.mutations %}{% endfor %}

import {
  CtrProvider,                                                                                    {% if _.has_behaviors %}
  NestedDefaultPropsProvider,                                                                     {% else %}{% endif %}

  withDefaultProps
} from 'react-default-props-context';
import { useStore } from 'src/app/components';                                                    {% end_clean_up_js_imports %}

type PropsT = React.PropsWithChildren<{}>;

type DefaultPropsT = {
    {{ item.ts_var }}: {{ item.ts_type }};                                                        {% for item in _.input_items %}
    {{ item.ts_var }}RS: string;                                                                  {% endfor %}
    {{ item_list.ts_var }}: {{ item_list.ts_type }};                                              {% for item_list in _.input_item_lists %}
    {{ item_list.ts_var }}RS: string;                                                             {% endfor %}
};

export const MyComponentStateProvider = observer(
  withDefaultProps<PropsT, DefaultPropsT>((props: PropsT & DefaultPropsT) => {
    const myQuery = useMyQuery();                                                                 {% for query in _.queries %}{% endfor %}
    const myMutation = useMyMutation();                                                           {% for mutation in _.mutations %}{% endfor %}

    const createState = () => new MyComponentState({                                              {% if _.has_behaviors %}
      deleteMyItems: {{ pipeline.deleter_mutation.name }}.mutateAsync,                            {% for pipeline in __.state.pipelines %}{% if pipeline.deleter_mutation %}{% endif %}{% endfor %}
    });

    const updateState = (state: MyComponentState) =>
      reaction(
        () => {
          return {
            {{ pipeline.output.ts_var }}: {{ pipeline.input_expression }},                        {% for pipeline in __.state.pipelines %}{% if pipeline.bvrs %}{% endif %}{% endfor %}
          }
        },
        (inputs) => {
          state.inputs.{{ pipeline.output.ts_var }} = inputs.{{ pipeline.output.ts_var }};        {% for pipeline in __.state.pipelines %}{% if pipeline.bvrs %}{% endif %}{% endfor %}
          if (flags.logStateProviders) {
            log('MyComponentState updated', state.getSummary());
          }
        },
        {
          fireImmediately: true,
        }
      );                                                                                          {% endif %}

    const getDefaultProps = (state: MyComponentState) => {                                        {% if _.has_behaviors %}
    const getDefaultProps = () => {                                                               {% else %}{% endif %}

      return {
        myComponentState: () => state,                                                            {% ?? _.has_behaviors %}
        {{ pipeline.output.ts_var }}: () => state.outputs.myItemsDisplay,                         {% for pipeline in __.state.pipelines %}{% if pipeline.bvrs %}
        myItemsDeletion: () => state.myItems.deletion,                                            {% ?? pipeline.get_bvr('deletion') %}
        myItemsSelection: () => state.myItems.selection,                                          {% ?? pipeline.get_bvr('selection') %}
        myItemsHighlight: () => state.myItems.highlight,                                          {% if pipeline.get_bvr('highlight') %}
        myItem: () => state.myItems.highlight.item,                                               {% endif %}
        {{ pipeline.output.ts_var }}: () => {{ pipeline.input_expression }},                      {% else %}{% endif %}
        {{ pipeline.output.ts_var }}RS: () => {{ pipeline.status_expression }},                   {% ?? pipeline.status_expression %}
                                                                                                  {% endfor %}
      };
    };

    return (                                                                                      {% if _.has_behaviors %}
      <CtrProvider
        createCtr={createState}
        updateCtr={updateState}
        destroyCtr={(state: MyComponentState) => state.destroy()}
        getDefaultProps={getDefaultProps}
      >
        {props.children}
      </CtrProvider>
    );
    return (                                                                                      {% else %}
      <NestedDefaultPropsProvider value={getDefaultProps()}>
        {props.children}
      </NestedDefaultPropsProvider>
    );                                                                                            {% endif %}
  })
);
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
