{% magic_with container.name as myContainer %}
{% magic_with bvr.name as myBvr %}
{% magic_with _.state.name as MyState %}
{% magic_with container.item_name as myItem %}
import { setCallbacks } from 'aspiration';
import { makeObservable } from 'mobx';
import { mapDataToProps, pmap } from 'skandha';
import { addCleanUpFunctionToCtr, cleanUpCtr } from 'react-default-props-context';
import * as Skandha from 'skandha';
import { registerCtr } from 'skandha-mobx';
import { getIds } from 'src/utils/ids';
import * as Facets from 'skandha-facets';
import { Selection, SelectionCbs, handleSelectItem } from 'skandha-facets/Selection';                   {% ?? __.has_bvr("selection") %}
import { Highlight, HighlightCbs } from 'skandha-facets/Highlight';                                     {% ?? __.has_bvr("highlight") %}
import { Filtering, FilteringCbs } from 'skandha-facets/Filtering';                                     {% ?? __.has_bvr("filtering") %}
import { Deletion, DeletionCbs } from 'skandha-facets/Deletion';                                        {% ?? __.has_bvr("deletion") %}
import { initMyContainer, MyItemsData } from './myItems';                                               {% !! container in __.containers %}
import { MyItemT } from 'src/api/types/MyItemT';                                                        {% !! container in __.containers %}

export type PropsT = {
  deleteMyItems: (ids: string[]) => Promise<any>;                                                       {% for container in __.containers %}{% ?? container.get_bvr("deletion") %}{% endfor %}
};

export class MyState {
  myContainer = {                                                                                       {% for container in __.containers %}
    data: new MyContainerData(),
    myBvr: new MyBvr{% if bvr.has_param %}<MyItemT>{% endif %}(),                                       {% !! bvr in container.bvrs %}
  }                                                                                                     {% endfor %}

  _myContainerMapData(props: PropsT) {                                                                  {% for container in __.containers %}
    const getMyItemById = (x: string) => this.myContainer.data.myItemById[x];                           {% ?? container.get_bvr("selection") or container.get_bvr("highlight") %}

    mapDataToProps(
      pmap(                                                                                             {% if container.get_bvr("filtering") %}
        //
        [this.myContainer.filtering, 'inputItems'],
        () => this.myContainer.data.myItems,
      ),                                                                                                {% endif %}
      pmap(
        //
        [this.myContainer.data, 'myItemsDisplay'],
        () => this.myContainer.data.myItems,                                                            {% ?? not container.get_bvr("filtering") %}
        () => this.myContainer.filtering.filteredItems,                                                 {% ?? container.get_bvr("filtering") %}
      ),
      pmap(                                                                                             {% if container.get_bvr("selection") %}
        //
        [this.myContainer.selection, 'selectableIds'],
        () => getIds(this.myContainer.data.myItemsDisplay),
      ),
      pmap(
        //
        [this.myContainer.selection, 'items'],
        () => this.myContainer.selection.ids.map(getMyItemById),
      ),                                                                                                {% endif %}
      pmap(                                                                                             {% if container.get_bvr("highlight") %}
        //
        [this.myContainer.highlight, 'item'],
        () => this.myContainer.highlight.id
          ? getMyItemById(this.myContainer.highlight.id)
          : undefined,
      ),                                                                                                {% endif %}
    )
  }                                                                                                     {% endfor %}

  getSummary() {
    return {
      myContainer: Skandha.getCtrState(this.myContainer),                                               {% !! container in __.containers %}
    }
  }

  destroy() {
    cleanUpCtr(this);
  }

  constructor(props: PropsT) {
    registerCtr({                                                                                       {% for container in __.containers %}
      ctr: this.myContainer,
      options: { name: 'MyState.MyContainer' },
      initCtr: () => {
        initMyContainer(this, props);
        this._myContainerMapData(props);
      },
    });                                                                                                 {% endfor %}
  }
}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
