{% magic_with _.component.name as yellowTulip %}
{% magic_with store.name as BlueDaisy %}
{% magic_with pipeline.output.item_name as redRose %}
{% magic_with bvr.name as purpleFlower %}

import { setCallbacks } from 'aspiration';
import { makeObservable } from 'mobx';
import { addCleanUpFunctionToCtr, cleanUpCtr } from 'react-default-props-context';
import * as Skandha from 'skandha';
import { ClassMemberT as CMT, facet, getm } from 'skandha';
import { registerCtr } from 'skandha-mobx';
import { getIds } from 'src/utils/ids';
import * as Facets from 'skandha-facets';
import * as FacetPolicies from 'skandha-facets/policies';
import { Selection, SelectionCbs, handleSelectItem } from 'skandha-facets/Selection';                   {% ?? __.has_bvr("selection") %}
import { Highlight, HighlightCbs } from 'skandha-facets/Highlight';                                     {% ?? __.has_bvr("highlight") %}
import { Filtering, FilteringCbs } from 'skandha-facets/Filtering';                                     {% ?? __.has_bvr("filtering") %}
import { Deletion, DeletionCbs } from 'skandha-facets/Deletion';                                        {% ?? __.has_bvr("deletion") %}
import { Inputs } from '{{ _.component.module.module_path }}/YellowTulipState/facets/Inputs';
import { Outputs } from '{{ _.component.module.module_path }}/YellowTulipState/facets/Outputs';
import * as Policies from './policies';
import * as Handlers from './handlers';

type PropsT = {
  deleteRedRoses: (ids: string[]) => Promise;                                                           {% for pipeline in __.pipelines %}{% ?? pipeline.get_bvr("deletion") %}{% endfor %}
};

export class YellowTulipState {
  inputs: Inputs = new Inputs();
  outputs: Outputs = new Outputs();

  redRoses = {                                                                                          {% for pipeline in __.pipelines %}
    purpleFlower: new PurpleFlower(),                                                                   {% for bvr in pipeline.bvrs %}{% endfor %}
  }                                                                                                     {% endfor %}

  _setRedRosesCallbacks(props: PropsT) {                                                                {% for pipeline in __.pipelines %}
    const ctr = this.redRoses;
    setCallbacks(ctr.deletion, {                                                                        {% if pipeline.get_bvr("deletion") %}
      delete: {
        deleteItems(this: DeletionCbs['delete']) {
          return props.{self.delete_function_name}(this.itemIds);
        },
      },
    } as DeletionCbs);                                                                                  {% endif %}
    setCallbacks(ctr.highlight, {
      highlightItem: {                                                                                  {% if pipeline.get_bvr("addition") %}
        enter(this: HighlightCbs['highlightItem']) {
          FacetPolicies.cancelNewItemOnHighlightChange(ctr.highlight, this.id);    # noqa: E501
        },
      },                                                                                                {% endif %}
    } as HighlightCbs);
    setCallbacks(ctr.selection, {                                                                       {% if pipeline.get_bvr("selection") %}
      selectItem: {
        selectItem(this: SelectionCbs['selectItem']) {
          handleSelectItem(ctr.selection, this.selectionParams);
          FacetPolicies.highlightFollowsSelection(                                                      {% if pipeline.get_bvr("highlight") %}
            ctr.selection,
            this.selectionParams
          );                                                                                            {% endif %}
        }
      },
    } as SelectionCbs);                                                                                 {% endif %}
  }                                                                                                     {% endfor %}

  _applyRedRosesPolicies(props: PropsT) {                                                               {% for pipeline in __.pipelines %}
    const con = Skandha.createConnector(this);

    con['outputs'].redRosesDisplay = con['inputs'].redRoses;                                            {% ?? not pipeline.get_bvr("filtering") %}

    // highlight                                                                                        {% if pipeline.get_bvr("highlight") %}
    con['redRoses.highlight'].item = con['redRoses.highlight'].id.ts(getRedRoseById)                    {% endif %}

    // selection                                                                                        {% if pipeline.get_bvr("highlight") %}
    con['redRoses.selection'].selectableIds = con['output'].redRosesDisplay.ts(getIds)
    con['redRoses.selection'].items = con['redRoses.selection'].ids.ts(getRedRosesById)                 {% endif %}

    con.connect();
  }                                                                                                     {% endfor %}

  getSummary() {
    return Skandha.getCtrState(this);
  }

  destroy() {
    cleanUpCtr(this);
  }

  constructor(props: PropsT) {
    registerCtr({
      ctr: this,
      options: { 'name': 'YellowTulipState', members: [] }
    });

    registerCtr({                                                                                       {% for pipeline in __.pipelines %}
      ctr: this.redRoses,
      options: { name: 'RedRoses' },
      initCtr: () => {
        this._setRedRosesCallbacks(props);
        this._applyRedRosesPolicies(props);
        addCleanUpFunctionToCtr(this, () => cleanUpCtr(this.redRoses));
      },
    });                                                                                                 {% endfor %}
  }
}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
