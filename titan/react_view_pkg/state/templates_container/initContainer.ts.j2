{% magic_with _.container.item.item_name as myItem %}
{% magic_with _.container.name as myContainer %}
{% magic_with _.state.name as MyState %}
import { PropsT, MyState } from 'src/{{ _.module.name }}/MyState';
import * as FacetPolicies from 'skandha-facets/policies';
import { SelectionCbs, handleSelectItem } from 'skandha-facets/Selection';                              {% ?? _.container.get_bvr("selection") %}
import { AdditionCbs } from 'skandha-facets/Addition';
import { HighlightCbs } from 'skandha-facets/Highlight';                                                {% ?? _.container.get_bvr("highlight") %}
import { InsertionCbs } from 'skandha-facets/Insertion';                                                {% ?? _.container.get_bvr("insertion") %}
import { DeletionCbs } from 'skandha-facets/Deletion';                                                  {% ?? _.container.get_bvr("deletion") %}
import { EditingCbs } from 'skandha-facets/Editing';                                                    {% ?? _.container.get_bvr("editing") %}
import { setCallbackMap } from 'aspiration';
import { MyItemT } from 'src/api/types/MyItemT';
import {
  addCleanUpFunctionToCtr,
  cleanUpCtr,
} from 'react-default-props-context';

export const initMyContainer = (state: MyState, props: PropsT) => {
  const ctr = state.myContainer;
  addCleanUpFunctionToCtr(state, () => cleanUpCtr(ctr));

  setCallbackMap(ctr.addition, {                                                                        {% if _.container.get_bvr("addition") %}
    add: {
      storeLocation() {
        FacetPolicies.newItemsAreAddedBelowTheHighlight(ctr.addition);
      },
      createItem(this: AdditionCbs<MyItemT>['add']) {
        return props.createMyItem(this.values);
      },
      highlightNewItem() {
        ctr.selection.selectItem({ itemId: ctr.addition.item?.id });
        props.locationState.goToMyItem(ctr.addition.item!);
        FacetPolicies.editingSetEnabled(ctr.addition);
      },
    },
    cancel: {
      restoreLocation() {
        FacetPolicies.editingSetDisabled(ctr.addition);
        props.locationState.goBack();
      },
    },
  } as AdditionCbs<MyItemT>);                                                                           {% endif %}

  setCallbackMap(ctr.deletion, {                                                                        {% if _.container.get_bvr("deletion") %}
    delete: {
      deleteItems(this: DeletionCbs['delete']) {
        return props.deleteMyItems(this.itemIds);
      },
    },
  } as DeletionCbs);                                                                                    {% endif %}

  setCallbackMap(ctr.editing, {                                                                         {% if _.container.get_bvr("editing") %}
    save: {
      saveItem(this: EditingCbs['save']) {
        const values = this.values;
        return props.saveMyItem(values).then((localMyItem: MyItemT) => {
          FacetPolicies.newItemsAreConfirmedOnEditingSave(ctr.editing);
          props.locationState.goToMyItem(localMyItem);
        });
      },
    },
    cancel: {
      exit() {
        FacetPolicies.newItemsAreCancelledOnEditingCancel(ctr.editing);
      },
    },
  } as EditingCbs);                                                                                     {% endif %}

  setCallbackMap(ctr.highlight, {                                                                       {% if _.container.get_bvr("selection") %}
    highlightItem: {                                                                                    {% if _.container.get_bvr("addition") %}
      enter(this: HighlightCbs['highlightItem']) {
        FacetPolicies.cancelNewItemOnHighlightChange(ctr.highlight, this.id);
      },
    },                                                                                                  {% endif %}
  } as HighlightCbs);                                                                                   {% endif %}

  setCallbackMap(ctr.insertion, {                                                                       {% if _.container.get_bvr("insertion") %}
    insertItems: {
      insertItems(myItems: MyItemT[]) {
        props.saveMyItemOrdering(myItems);
      },
    },
  } as InsertionCbs);                                                                                   {% endif %}

  setCallbackMap(ctr.selection, {                                                                       {% if _.container.get_bvr("selection") %}
    selectItem: {
      selectItem(this: SelectionCbs['selectItem']) {
        handleSelectItem(ctr.selection, this.selectionParams);
        FacetPolicies.highlightFollowsSelection(                                                        {% if _.container.get_bvr("highlight") %}
          ctr.selection,
          this.selectionParams
        );                                                                                              {% endif %}
      }
    },
  } as SelectionCbs);                                                                                   {% endif %}
}
{% end_magic_with %}
