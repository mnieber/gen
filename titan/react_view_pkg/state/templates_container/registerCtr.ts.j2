{% magic_with myContainer = _.container.name %}
{% magic_with MySource = __.item_source %}
{% magic_with myItem = _.container.item_name %}
{% magic_with MyState = _.state.name %}
import { getIds } from '/src/utils/ids';
import { registerCtr } from 'skandha-mobx';
import { PropsT, MyState } from '/src/{{ _.module.name }}/MyState';
import { addCleanUpFunctionToCtr, cleanUpCtr, mapDataToProps } from 'skandha';
import * as FacetPolicies from 'skandha-facets/policies';
import { SelectionCbs, handleSelectItem } from 'skandha-facets';                                        {% ?? _.container.selection_bvr %}
import { AdditionCbs } from 'skandha-facets';
import { HighlightCbs } from 'skandha-facets';                                                          {% ?? _.container.highlight_bvr %}
import { InsertionCbs } from 'skandha-facets';                                                          {% ?? _.container.insertion_bvr %}
import { DeletionCbs } from 'skandha-facets';                                                           {% ?? _.container.deletion_bvr %}
import { EditCbs } from 'skandha-facets';                                                               {% ?? _.container.edit_bvr %}
import { setCallbackMap } from 'aspiration';
import { MyItemT } from '/src/api/types/MyItemT';                                                       {% ?? _.container.item_name %}

const mapData = (state: MyState) => {
  const ctr = state.myContainerCtr;

  const getMyItemById = (x: string | undefined) =>                                                    {% if _.container.selection_bvr or _.container.highlight_bvr %}
    x ? ctr.mySource.itemById[x] : undefined;
  {{ "" }}                                                                                            {% endif %}
  mapDataToProps(ctr, {                                                                               {% min_lines count=3 %}
    store: {                                                                                          {% if _.container.store_bvr %}
      items: () => state.props.getMyItems(),
    },                                                                                                {% endif %}
    selection: {                                                                                      {% if _.container.selection_bvr %}
        selectableIds:
          () => getIds(
            ctr.mySource.items
            ?? []                                                                                     {% ?? not _.container.display_bvr %}
          ),
        items:
          () => ctr.selection.ids
            .map(getMyItemById)
            .filter((x?: MyItemT) => !!x) as MyItemT[],
    },                                                                                                {% endif %}
    highlight: {                                                                                      {% if _.container.highlight_bvr %}
      highlightableIds: () => getIds(
        ctr.mySource.items
        ?? []                                                                                         {% ?? not _.container.display_bvr %}
      ),
      item: () => getMyItemById(ctr.highlight.id),
    },                                                                                                {% endif %}
    filtering: {                                                                                      {% if _.container.filtering_bvr %}
      inputItems: () => ctr.store.myItems,
    },                                                                                                {% endif %}
    insertion: {                                                                                      {% if _.container.insertion_bvr %}
      inputItems:
        () => ctr.filtering.filteredItems,                                                            {% ?? _.container.filtering_bvr %}
        () => ctr.store.items ?? [],                                                                  {% ?? not _.container.filtering_bvr %}
      preview:                                                                                        {% if _.container.addition_bvr and _.container.insertion_bvr %}
        () =>
          createInsertionPreview(
            [DragSourceFromNewItem],
            ctr
          )(ctr.insertion.inputItems),                                                                {% endif %}
    },                                                                                                {% endif %}
    deletion: {                                                                                       {% if _.container.deletion_bvr %}
      disabled: () => R.any((x: MyItemT) => isUpdating(x), ctr.selection.items),
    },                                                                                                {% endif %}
    display: {                                                                                        {% if _.container.display_bvr %}
      items:
        () => ctr.insertion.preview,                                                                  {% ?? _.container.insertion_bvr %}
        () => ctr.filtering.filteredItems,                                                            {% ?? not _.container.insertion_bvr and _.container.filtering_bvr %}
    },                                                                                                {% endif %}
  });                                                                                                 {% end_min_lines %}
}

const setCallbacks = (state: MyState) => {
  const ctr = state.myContainerCtr;
  addCleanUpFunctionToCtr(state, () => cleanUpCtr(ctr));

  setCallbackMap(ctr.addition, {                                                                        {% if _.container.addition_bvr %}
    add: {
      stageAdd() {
        ctr.addition.parentId = ctr.highlight.id || topOfTheList;                                       {% ?? _.container.highlight_bvr %}
      },
      highlightNewItem() {
        ctr.selection.selectItem({ itemId: ctr.addition.item?.id });
        ctr.edit.enable();
      },
    },
    cancel: {
      unstageAdd(parentId: string | undefined) {
        ctr.edit.cancel();
      },
    },
    confirm: {
      confirmAdd() {
        FacetPolicies.newItemsAreInsertedWhenConfirmed(ctr.addition);
      },
    },
  } as AdditionCbs<MyItemT>);                                                                           {% endif %}

  setCallbackMap(ctr.deletion, {                                                                        {% if _.container.deletion_bvr %}
    delete: {
      deleteItems(this: DeletionCbs['delete']) {
        return state.props.deleteMyItems(this.args.itemIds);
      },
    },
  } as DeletionCbs);                                                                                    {% endif %}

  setCallbackMap(ctr.edit, {                                                                            {% if _.container.edit_bvr and _.container.item_name %}
    save: {
      saveItem(this: EditCbs['save']) {
        return state.props.saveMyItem(this.args.values)
          .then(() => {                                                                                 {% if _.container.addition_bvr %}
            ctr.addition.confirm();
          })                                                                                            {% endif %}
        ;
      },
    },
    cancel: {
      onCancel() {                                                                                      {% if _.container.addition_bvr %}
        ctr.addition.cancel();
      },                                                                                                {% endif %}
    },
  } as EditCbs);                                                                                        {% endif %}

  setCallbackMap(ctr.highlight, {                                                                       {% if _.container.selection_bvr %}
    highlightItem: {                                                                                    {% if _.container.addition_bvr %}
      enter(this: HighlightCbs['highlightItem']) {
        // Cancel adding a new item on highlight change
        if (ctr.addition.item && ctr.addition.item.id !== this.args.id) {
          ctr.addition.cancel();
        }
      },
    },                                                                                                  {% endif %}
  } as HighlightCbs);                                                                                   {% endif %}

  setCallbackMap(ctr.insertion, {                                                                       {% if _.container.insertion_bvr %}
    insertItems: {
      insertItems(myItems: MyItemT[]) {
        state.props.saveMyItemOrdering(myItems);
      },
    },
  } as InsertionCbs);                                                                                   {% endif %}

  setCallbackMap(ctr.selection, {                                                                       {% if _.container.selection_bvr %}
    selectItem: {
      selectItem(this: SelectionCbs['selectItem']) {
        handleSelectItem(ctr.selection, this.args);
        // Highlight follows selection                                                                  {% if _.container.highlight_bvr %}
        if (!this.args.isCtrl && !this.args.isShift) {
          ctr.highlight.highlightItem({ id: this.args.itemId });
        }                                                                                               {% endif %}
      }
    },
  } as SelectionCbs);                                                                                   {% endif %}
}

export const registerMyContainerCtr = (state: MyState) => {
  registerCtr({
    ctr: state.myContainerCtr,
    options: { name: 'MyState.MyContainer' },
    initCtr: () => {
      setCallbacks(state);
      mapData(state);
    },
  });
}