{% magic_with myContainer = _.container.name %}
{% magic_with myItem = _.container.item_name %}
{% magic_with MyState = _.state.name %}
import { getIds } from '/src/utils/ids';
import { registerCtr } from 'skandha-mobx';
import { PropsT, MyState } from '/src/{{ _.module.name }}/MyState';
import { addCleanUpFunctionToCtr, cleanUpCtr, mapDataToProps } from 'skandha';
import * as FacetPolicies from 'skandha-facets/policies';
import { SelectionCbs, handleSelectItem } from 'skandha-facets/Selection';                              {% ?? _.container.get_bvr("selection") %}
import { AdditionCbs } from 'skandha-facets/Addition';
import { HighlightCbs } from 'skandha-facets/Highlight';                                                {% ?? _.container.get_bvr("highlight") %}
import { InsertionCbs } from 'skandha-facets/Insertion';                                                {% ?? _.container.get_bvr("insertion") %}
import { DeletionCbs } from 'skandha-facets/Deletion';                                                  {% ?? _.container.get_bvr("deletion") %}
import { EditCbs } from 'skandha-facets/Edit';                                                          {% ?? _.container.get_bvr("edit") %}
import { setCallbackMap } from 'aspiration';
import { MyItemT } from '/src/api/types/MyItemT';                                                       {% ?? _.container.item_list %}

const mapData = (state: MyState) => {
  const ctr = state.myContainerCtr;

  const getMyItemById = (x: string | undefined) =>                                                    {% if _.container.get_bvr("selection") or _.container.get_bvr("highlight") %}
    x ? ctr.store.itemById[x] : undefined;
  {{ "" }}                                                                                            {% endif %}
  mapDataToProps(ctr, {                                                                               {% min_lines count=3 %}
    store: {                                                                                          {% if _.container.get_bvr("store") %}
      items: () => state.props.getMyItems(),
    },                                                                                                {% endif %}
    selection: {                                                                                      {% if _.container.get_bvr("selection") %}
        selectableIds:
          () => getIds(ctr.store.myItems),                                                            {% ?? not (_.container.get_bvr("filtering") or _.container.get_bvr("insertion")) %}
          () => getIds(ctr.store.myItemsDisplay),                                                     {% ?? _.container.get_bvr("filtering") or _.container.get_bvr("insertion") %}
        items:
          () => ctr.selection.ids.map(getMyItemById as any),
    },                                                                                                {% endif %}
    highlight: {                                                                                      {% if _.container.get_bvr("highlight") %}
      item: () => getMyItemById(ctr.highlight.id),
      highlightableIds: () => getIds(ctr.store.items ?? []),
    },                                                                                                {% endif %}
    filtering: {                                                                                      {% if _.container.get_bvr("filtering") %}
      inputItems: () => ctr.store.myItems,
    },                                                                                                {% endif %}
    insertion: {                                                                                      {% if _.container.get_bvr("insertion") %}
      inputItems:
        () => ctr.filtering.filteredItems,                                                            {% ?? _.container.get_bvr("filtering") %}
        () => ctr.store.myItems,                                                                      {% ?? not _.container.get_bvr("filtering") %}
      preview:                                                                                        {% if _.container.get_bvr("addition") and _.container.get_bvr("insertion") %}
        () =>
          FacetPolicies.insertionPreviewUsesDragSources(
            [FacetPolicies.DragSourceFromNewItem],
            this.myItems
          )(this.myItems.insertion.inputItems)                                                        {% endif %}
    },                                                                                                {% endif %}
    display: {                                                                                        {% if _.container.get_bvr("display") %}
      items:
        () => ctr.insertion.preview,                                                                  {% ?? _.container.get_bvr("insertion") %}
        () => ctr.filtering.filteredItems,                                                            {% ?? not _.container.get_bvr("insertion") and _.container.get_bvr("filtering") %}
    },                                                                                                {% endif %}
  });                                                                                                 {% end_min_lines %}
}

const setCallbacks = (state: MyState) => {
  const ctr = state.myContainerCtr;
  addCleanUpFunctionToCtr(state, () => cleanUpCtr(ctr));

  setCallbackMap(ctr.addition, {                                                                        {% if _.container.get_bvr("addition") %}
    add: {
      storeLocation() {
        FacetPolicies.newItemsAreAddedBelowTheHighlight(ctr.addition);
      },
      highlightNewItem() {
        ctr.selection.selectItem({ itemId: ctr.addition.item?.id });
        FacetPolicies.editingSetEnabled(ctr.addition);
      },
    },
    cancel: {
      restoreLocation() {
        FacetPolicies.editingSetDisabled(ctr.addition);
      },
    },
  } as AdditionCbs<MyItemT>);                                                                           {% endif %}

  setCallbackMap(ctr.deletion, {                                                                        {% if _.container.get_bvr("deletion") %}
    delete: {
      deleteItems(this: DeletionCbs['delete']) {
        return state.props.deleteMyItems(this.itemIds);
      },
    },
  } as DeletionCbs);                                                                                    {% endif %}

  setCallbackMap(ctr.edit, {                                                                            {% if _.container.get_bvr("edit") %}
    save: {
      saveItem(this: EditCbs['save']) {
        const values = this.values;
        return state.props.saveMyItem(values).then((localMyItem: MyItemT) => {
          FacetPolicies.newItemsAreConfirmedOnEditingSave(ctr.edit);
        });
      },
    },
    cancel: {
      exit() {
        FacetPolicies.newItemsAreCancelledOnEditingCancel(ctr.edit);
      },
    },
  } as EditCbs);                                                                                        {% endif %}

  setCallbackMap(ctr.highlight, {                                                                       {% if _.container.get_bvr("selection") %}
    highlightItem: {                                                                                    {% if _.container.get_bvr("addition") %}
      enter(this: HighlightCbs['highlightItem']) {
        FacetPolicies.cancelNewItemOnHighlightChange(ctr.highlight, this.id);
      },
    },                                                                                                  {% endif %}
  } as HighlightCbs);                                                                                   {% endif %}

  setCallbackMap(ctr.insertion, {                                                                       {% if _.container.get_bvr("insertion") %}
    insertItems: {
      insertItems(myItems: MyItemT[]) {
        state.props.saveMyItemOrdering(myItems);
      },
    },
  } as InsertionCbs);                                                                                   {% endif %}

  setCallbackMap(ctr.selection, {                                                                       {% if _.container.get_bvr("selection") %}
    selectItem: {
      selectItem(this: SelectionCbs['selectItem']) {
        handleSelectItem(ctr.selection, this.selectionParams);
        FacetPolicies.highlightFollowsSelection(                                                        {% if _.container.get_bvr("highlight") %}
          ctr.selection,
          this.selectionParams
        );                                                                                              {% endif %}
      }
    },
  } as SelectionCbs);                                                                                   {% endif %}
}

export const registerMyContainerCtr = (state: MyState) => {
  registerCtr({
    ctr: state.myContainerCtr,
    options: { name: 'MyState.MyContainer' },
    initCtr: () => {
      setCallbacks(state);
      mapData(state);
    },
  });
}