{% magic_with fooModule = module.name %}
{% magic_with fooMutation = mutation.name %}
{% clean_up_py_imports %}
import graphene
from graphene.types.generic import GenericScalar
{% end_clean_up_py_imports %}
from .{{ mutation.name|lower }} import FooMutation                              {% !! mutation in _.api_reg.get_mutations(module_name="api") %}
import foo_module.schema                                                        {% !! module in __.modules %}


class GrapheneNonEmptyMutation(graphene.Mutation):
    test_mutation = graphene.Field(graphene.String)

    def mutate(self, info, **kwargs):
        return GrapheneNonEmptyMutation(test_mutation="Hello world")


class Mutation(
    foo_module.schema.Mutation,                                                 {% !! module in __.modules|sort(attribute="name") %}
    GrapheneNonEmptyMutation
):
    foo_mutation = FooMutation.Field()                                          {% for mutation in _.api_reg.get_mutations(module_name="api") %}
    pass                                                                        {% else %}{% endfor %}
