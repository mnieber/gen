{% magic_with fooModule = module.name %}
{% magic_with fooQuery = query.name %}
{% clean_up_py_imports %}
import graphene
from graphene.types.generic import GenericScalar
{% end_clean_up_py_imports %}
from .{{ query.name|lower }} import FooQuery                              {% for query in _.api_reg.get_queries(module_name="api") %}{% endfor %}
import foo_module.schema                                                  {% for module in __.modules %}{% endfor %}


class GrapheneNonEmptyQuery(graphene.ObjectType):
    test_query = graphene.Field(graphene.String)

    def resolve_test_query(self, info, **kwargs):
        return "Hello world"


class Query(
    foo_module.schema.Query,                                              {% for module in __.modules %}{% endfor %}
    FooQuery,                                                             {% for query in _.api_reg.get_queries(module_name="api") %}{% endfor %}
    GrapheneNonEmptyQuery
):
    pass
