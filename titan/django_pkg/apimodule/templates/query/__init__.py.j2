{% magic_with module.name as fooModule %}
{% magic_with query.name as fooQuery %}
{% clean_up_py_imports %}
import graphene
from graphene.types.generic import GenericScalar
{% end_clean_up_py_imports %}
from .{{ query.name|lower }} import FooQuery                              {% for query in _.graphql_api.queries %}{% endfor %}
import foo_module.schema                                                  {% for module in __.modules %}{% endfor %}


class GrapheneNonEmptyQuery(graphene.ObjectType):
    test_query = graphene.Field(graphene.String)

    def resolve_test_query(self, root, info, **kwargs):
        return "Hello world"


class Query(
    foo_module.schema.Query,                                              {% for module in __.modules %}{% endfor %}
    FooQueryQuery,                                                        {% for query in _.graphql_api.queries %}{% endfor %}
    GrapheneNonEmptyQuery
):
    pass

{% end magic_with %}
{% end magic_with %}