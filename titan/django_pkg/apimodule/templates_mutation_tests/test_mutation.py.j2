{% magic_with _.mutation.name as postFoo %}
{% magic_with field_spec.target as MyFieldTarget %}
{% magic_with field_spec.name as myFieldName %}
{% magic_with fixture.name as myFixtureName %}
{% magic_with fixture.field_spec.target as MyFixtureTarget %}
import pytest
from api.tests.graphqltestcase import GraphqlTestCase
from .create_post_foo_mutation import create_post_foo_mutation
{{ __.mutation_fixture_imports() }}

class TestPostFooMutation(GraphqlTestCase):
{{ __.define_fixtures() }}

    @pytest.mark.django_db()
    def test_post_foo__(
        self,
        my_fixture_name,                                                    {% !! fixture in __.fixtures %}
        client_query,
    ):
        my_fixture_target_ids = [str(x.id) for x in my_fixture_name]        {% !! fixture in __.ids_fixtures %}
        query, operation_name, variables = create_post_foo_mutation(
            my_fixture_target_id=str(my_fixture_name.id),                   {% !! fixture in __.id_fixtures %}
            my_fixture_target_ids=my_fixture_target_ids,                    {% !! fixture in __.ids_fixtures %}
            my_field_target=create_random_my_field_target(),                {% !! field_spec in __.form_input_field_specs %}
            output_values=[
                'myFieldName'      {% if not loop.last %},{% endif %}       {% !! field_spec in __.scalar_output_field_specs %}
            ],
        );
        response = client_query(
            query, operation_name=operation_name, variables=variables
        )
        data = response.json()["data"]

        # Check that the response is as expected
        assert data["postFoo"] == {"errors": {}, "success": True}
        assert False, "Moonleap Todo"


{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
