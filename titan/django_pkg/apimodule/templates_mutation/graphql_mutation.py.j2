{% magic_with input_field_spec.name as inputFieldName %}
{% magic_with output_field_spec.name as outputFieldName %}
{% magic_with _.mutation.name as mutationName %}
{% magic_with output_field_spec.target as OutputFieldTarget %}
{% magic_with item.item_name as itemTypeName %}

import graphene                                                                         {% clean_up_py_imports %}
from graphene.types.generic import GenericScalar                                        {% end_clean_up_py_imports %}
from api.types import *
from {{ type_spec.django_module.module_path }}.models import {{ type_spec.type_name }}  {% !! type_spec in __.type_specs_to_import %}

class MutationName(graphene.Mutation):
    output_field_name = {{ output_field_spec.graphene_type("") }}                       {% for output_field_spec in __.output_field_specs %}{% endfor %}

    class Arguments:
        input_field_name = {{ __.graphene_type(input_field_spec) }}                     {% for input_field_spec in __.input_field_specs %}
        pass                                                                            {% else %}{% endfor %}

    def mutate(
        self,
        info,
        input_field_name,                                                               {% for input_field_spec in __.input_field_specs %}{% endfor %}
        {% remove_trailing suffix="," %}
    ):
        # Moonleap Todo: implement mutation
        {{ item.item_name }}, created = ItemTypeName.objects.update_or_create()         {% !! item in __.items_saved %}
        ItemTypeName.objects.none().delete()                                            {% !! item in __.items_deleted %}

        return MutationName(
            success=True,
            errors={},
                                                                                        {% for output_field_spec in __.output_field_specs %}{% with field_type=output_field_spec.field_type %}
                                                                                        {% if output_field_spec.name not in ("success", "errors") %}
            output_field_name=OutputFieldTarget.objects.filter().first(),               {% ?? field_type == "fk" %}
            output_field_name=OutputFieldTarget.objects.filter(),                       {% ?? field_type == "relatedSet" %}
            output_field_name={},                                                       {% ?? field_type == "json" %}
            output_field_name=0,                                                        {% ?? field_type == "int" %}
            output_field_name="",                                                       {% ?? field_type not in ("fk", "relatedSet", "json", "int") %}
                                                                                        {% endif %}
                                                                                        {% endwith %}{% endfor %}
        )
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
