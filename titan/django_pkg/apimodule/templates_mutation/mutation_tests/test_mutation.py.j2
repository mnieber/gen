{% magic_with _.mutation.name as postFooItem %}
import pytest
from api.tests.graphqltestcase import GraphqlTestCase
from .create_post_blue_daisy_mutation import create_post_blue_daisy_mutation
{{ __.mutation_fixture_imports() }}

class TestPostBlueDaisyMutation(GraphqlTestCase):
{{ __.define_fixtures() }}

    @pytest.mark.django_db()
    def test_post_foo_item(
        self,
        client_query,
        output_field_name,                                                          {% for output_field_spec in __.output_field_specs %}{% endfor %}
    ):
        query, op_name, variables = create_post_blue_daisy_mutation(
            {{ __.create_mutation_args() }}
        );
        response = client_query(query, op_name=op_name, variables=variables)
        data = response.json()["data"]

        # check that the response is as expected
        assert data["postFooItem"] == {"errors": {}, "success": True}

{% end_magic_with %}
