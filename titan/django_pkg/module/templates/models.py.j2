{% magic_with model.name as MyModel %}
{% magic_with through_model.name as MyFkModel %}
{% magic_with field.name as my_field %}

import uuid                                                                                 {% clean_up_py_imports %}
from django.db import models
from django.utils.text import slugify
{{ sections.model_imports(model)}}                                                          {% for model in _.django_models %}{% endfor %}
                                                                                            {% end_clean_up_py_imports %}
from app.models import Entity

class MyModel(Entity):                                                                      {% for model in _.django_models %}
    class Meta:                                                                             {% if sections.indexed_field_specs(item_list) %}
        indexes = [
            models.Index(fields=["my_field"])                                               {% for field in model.indexed_fields %}{% endfor %}
        ]                                                                                   {% endif %}

    my_field = {{ field.model }}                                                            {% for field in model.indexed_fields %}{% endfor %}

    def save(self, *args, **kwargs):                                                        {% if model.slug_fields %}
        if self.my_field is None:                                                           {% for field in models.slug_fields %}
            self.my_field = slugify(self.{{ slug_field.slug_src }})                         {% endfor %}
        super().save(*args, **kwargs)                                                       {% endif %}

    def __str__(self):
        return "MyModel: " + self.{{ model.display_field_name }}

class MyModelMyFkModel(models.Model):                                                       {% for through_model in model.through_models %}
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    my_model = models.ForeignKey(MyModel, on_delete=models.CASCADE)
    my_fk_model = models.ForeignKey(MyFkModel, on_delete=models.CASCADE)

    def __str__(self):
        return "MyModelMyFkModel: " + self.my_model.name + " -> " + self.my_fk_model.name   {% endfor %}

                                                                                            {% endfor %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
