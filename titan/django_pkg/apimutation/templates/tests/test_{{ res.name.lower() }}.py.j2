{% magic_with item.item_name as yellowTulip %}
{% magic_with item.item_name_snake as yellow_tulip %}
{% magic_with form.item_name_snake as red_rose %}
{% magic_with form.item_name as redRose %}
{% magic_with item_list.item_name as purpleOrchid %}
{% magic_with item_list.item_name_snake as purple_orchid %}
import pytest
from django.test import Client

class TestSchema:
    @pytest.fixture()
    def client(self):
        return Client()

{% for item_list in res.item_lists_provided %}
    @pytest.mark.django_db()
    def test_query_purple_orchid(self, client: Client):
        query = create_purple_orchids_query()
        response = client.get("/graphql/", dict(query=query))

        # check that the response is as expected
        assert response.json() == {
            "data": {"purpleOrchids": []}
        }

{% endfor %}
{% for form in res.forms %}
    @pytest.mark.django_db()
    def test_red_rose(self, client: Client):
        query = create_red_rose_mutation(
            {{ graphene.sections.form_values(form.data_type_name) }}
        );
        response = client.post("/graphql/", dict(query=query))

        # check that the response is as expected
        assert response.json() == {
            "data": {"redRose": {"success": True} }
        }

{% endfor %}
{% for item in res.items_received %}
    @pytest.mark.django_db()
    def test_post_yellow_tulip(self, client: Client):
        query = create_post_yellow_tulip_mutation(
            {{ graphene.sections.form_values(item.item_name) }}
        );
        response = client.post("/graphql/", dict(query=query))

        # check that the response is as expected
        assert response.json() == {
            "data": {"postYellowTulip": {"success": True}}
        }
{% endfor %}

{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
