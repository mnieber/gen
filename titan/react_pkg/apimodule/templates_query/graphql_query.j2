{% magic_with _.query.name as getFooQuery %}
{% magic_with input_field_spec.name as inputFieldName %}
{% magic_with input_field_spec.graphql_type("client") as inputFieldGqlType %}
{% magic_with input_field_spec.ts_type as inputFieldTsType %}
{% magic_with output_field_spec.name as outputFieldName %}
{% magic_with type_spec.type_name as TypeSpecName %}
import { useQuery } from '@tanstack/react-query';
import { useQueryData } from 'src/api/hooks';
import { doQuery } from 'src/api/graphqlClient';
import { ObjT } from 'src/utils/types';
import { typeSpecNameGqlFields } from 'src/api/types/TypeSpecNameT'                        {% !! type_spec in __.type_specs_to_import %}

export type ArgsT = {
  inputFieldName: inputFieldTsType,                                                        {% for input_field_spec in __.input_field_specs %}{% endfor %}
};

export const getFooQuery = (args: ArgsT) => {
  return doQuery(
    `query getFooQuery(
      $inputFieldName: inputFieldGqlType                                                   {% for input_field_spec in __.input_field_specs %}{% endfor %}
    ) {
      getFooQuery(
        inputFieldName: $inputFieldName                                                    {% for input_field_spec in __.input_field_specs %}{% endfor %}
      ) {
        outputFieldName                                                                    {% for output_field_spec in __.scalar_output_field_specs %}{% endfor %}
        outputFieldName {                                                                  {% for output_field_spec in __.fk_output_field_specs %}
{{ __.graphql_body[output_field_spec.name] }}
        }                                                                                  {% endfor %}
      }
    }`,
    args
  ).then(
    (response: ObjT) => {
      return response.getFooQuery;
    }
  );
}

export const useGetFooQuery = (
  args: ArgsT                                                                               {% ?? __.input_field_specs %}
) => {
  const query = useQuery([
      'getFooQuery',
      args                                                                                  {% ?? __.input_field_specs %}
      {% remove_trailing suffix="," %}
    ], () => getFooQuery(
    args                                                                                    {% ?? __.input_field_specs %}
    {}                                                                                      {% ?? not __.input_field_specs %}
  ));
  return useQueryData(query);
};
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
