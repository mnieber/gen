{% magic_with myEndpoint = _.query.name %}
{% magic_with myInputFieldGqlType = input_field_spec.graphql_type %}
{% magic_with myInputFieldName = input_field_spec.name %}
{% magic_with myInputFieldTsType = input_field_spec.ts_type %}
import { useQuery } from '@tanstack/react-query';
import { doQuery } from '/src/api/graphqlClient';                                                    {% ?? _.react_app.use_graphql %}
import * as R from 'ramda';
import { ObjT } from '/src/utils/types';
import { createQueryKey } from '/src/utils/createQueryKey';
import { queryClient } from '/src/api/queryClient';
import myEndpointStub from '/src/api/stubs/myEndpointStub.json';                                     {% ?? _.query.api_spec.is_stub %}
import { wait } from '/src/utils/wait';

export type ArgsT = {
  myInputFieldName{% if input_field_spec.is_optional %}?{% endif %}: myInputFieldTsType;            {% !! input_field_spec in __.input_field_specs %}
};

export const myEndpoint = (args: ArgsT) => {
  return Promise.resolve({myEndpoint: myEndpointStub})                                              {% if _.query.api_spec.is_stub %}
  return doQuery(                                                                                   {% elif _.react_app.use_graphql %}
    `query myEndpoint(                                                                              {% if __.input_field_specs %}
      $myInputFieldName: myInputFieldGqlType                                                        {% !! input_field_spec in __.input_field_specs %}
    ) {
      myEndpoint(
        myInputFieldName: $myInputFieldName                                                         {% !! input_field_spec in __.input_field_specs %}
      ) {
    `query myEndpoint {                                                                             {% else %}
      myEndpoint {                                                                                  {% endif %}
        // MOONLEAP TODO
      }
    }`,
    args
  )
  return Promise.resolve({myEndpoint: "Moonleap Todo"});                                            {% else %}{% endif %}
  .then(
    (response: ObjT) => {
      return wait(
        import.meta.env.DEV ? 1000 : 0,
        response.myEndpoint
      );
    }
  );
};

export type QueryKeyT = ArgsT;

export function queryKey(args: QueryKeyT) {
  return createQueryKey<QueryKeyT>('myEndpoint', args);
}

export type OptionsT = {
  enabled?: boolean;
};

export const useMyEndpoint = (
  args: ArgsT,
  options?: OptionsT
) => {
  return useQuery({
    queryKey: queryKey(
      args
    ),
    queryFn: () => myEndpoint(
      args
    ),
    enabled: !!(options?.enabled ?? true),
  })
  ;
};

export const invalidateMyEndpoint = (args: QueryKeyT) => {
  return queryClient.invalidateQueries({
    queryKey: queryKey(args),
  });
};
