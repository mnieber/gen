{% magic_with _.query.name as getFooQuery %}
{% magic_with input_field_spec.name as inputFieldName %}
{% magic_with input_field_spec.graphql_type as inputFieldGqlType %}
{% magic_with input_field_spec.ts_type as inputFieldTsType %}
{% magic_with output_field_spec.name as outputFieldName %}
import { useQuery } from '@tanstack/react-query';
import { useQueryData } from 'src/api/hooks';
import { doQuery } from 'src/api/graphqlClient';
import { ObjT } from 'src/utils/types';

export type ArgsT = {
  inputFieldName: inputFieldTsType,                                                        {% for input_field_spec in __.input_field_specs %}{% endfor %}
};

export const getFooQuery = (args: ArgsT) => {
  return doQuery(
    `query getFooQuery(
      $inputFieldName: inputFieldGqlType                                                   {% for input_field_spec in __.input_field_specs %}{% endfor %}
    ) {
      getFooQuery(
        inputFieldName: $inputFieldName                                                    {% for input_field_spec in __.input_field_specs %}{% endfor %}
      ) {
        outputFieldName                                                                    {% for output_field_spec in __.scalar_output_field_specs %}{% endfor %}
        outputFieldName {                                                                  {% for output_field_spec in __.fk_output_field_specs %}
          {{ __.ts_graphql_query_body(output_field_spec) }}
        }                                                                                  {% endfor %}
      }
    }`,
    args
  ).then(
    (response: ObjT) => {
      return response.getFooQuery;
    }
  );
}

export const useGetFooQuery = (args: ArgsT) => {
  const query = useQuery(['getFooQuery', args], () => getFooQuery(args));
  return useQueryData(query);
};
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
