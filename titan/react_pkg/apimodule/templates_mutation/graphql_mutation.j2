{% magic_with callMyEndpoint = _.mutation.name %}
{% magic_with myFieldGqlType = field_spec.graphql_type %}
{% magic_with myFieldName = field_spec.name %}
{% magic_with myFieldTsType = field_spec.ts_type %}
import * as R from 'ramda';
import { useObservableMutation } from '/src/api/ObservableMutation';
import { queryClient } from '/src/api/queryClient';                                                          {% ?? _.mutation.api_spec.invalidates %}
import { doQuery } from '/src/api/graphqlClient';
import { ObjT } from '/src/utils/types';
import { wait } from '/src/utils/wait';
import { {{ queryName }}QueryKey } from '/src/api/queries';                                                  {% !! queryName in _.mutation.api_spec.invalidates %}
import { {{ type_spec.type_name }}T } from '/src/api/types/{{ type_spec.type_name|chop_suffix("Form") }}T';  {% !! type_spec in __.form_input_type_specs %}
import { queryClient } from '/src/api/queryClient';

export type ArgsT = {
  myFieldName: myFieldTsType;                                                                               {% !! field_spec in __.input_field_specs %}
};

export const callMyEndpoint = (args: ArgsT) => {
  return doQuery(
    `mutation callMyEndpoint(                                                                               {% if __.input_field_specs %}
      $myFieldName: myFieldGqlType                                                                          {% !! field_spec in __.input_field_specs %}
    ) {
      callMyEndpoint(
        myFieldName: $myFieldName                                                                           {% !! field_spec in __.input_field_specs|sort(attribute="name") %}
      ) {
    `mutation callMyEndpoint {                                                                              {% else %}
      callMyEndpoint {                                                                                      {% endif %}
        // MOONLEAP TODO
        errors
        success
      }
    }`,
    args
  ).then(
    (response: ObjT) => {
      return wait(
        import.meta.env.DEV ? 1000 : 0,
        response.callMyEndpoint
      );
    }
  );
};

export const useCallMyEndpoint = () => {
  return useObservableMutation({
    mutationFn: callMyEndpoint,
    onMutate: (args: ArgsT) => {                                                                            {% if _.mutation.api_spec.orders %}
      // MOONLEAP TODO: update ordering of {{ _.mutation.api_spec.orders }} in the query cache.
    },                                                                                                      {% endif %}
    onSuccess: (response: ObjT, args: ArgsT) => {                                                           {% if _.mutation.api_spec.invalidates %}
      return Promise.all([
        queryClient.invalidateQueries(                                                                      {% for queryName in _.mutation.api_spec.invalidates %}
          {
            queryKey: {{ queryName }}QueryKey()
          }
        ),                                                                                                  {% endfor %}
      ])
    },                                                                                                      {% endif %}
  });
};
