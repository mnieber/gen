{% magic_with _.mutation.name as postRedRose %}
{% magic_with input_field_spec.name as inputFieldName %}
{% magic_with input_field_spec.ts_type as inputFieldTsType %}
{% magic_with input_field_spec.graphql_type as inputFieldGqlType %}
{% magic_with query.name as fooQueryName %}
import { useMutation } from '@tanstack/react-query';
import { queryClient } from 'src/api/queryClient';
import { doQuery } from 'src/api/graphqlClient';
import { useMutationData } from 'src/api/hooks';
import { ObjT } from 'src/utils/types';
import { {{ item.ts_form_type }} } from 'src/api/types/{{ item.type_name }}T';            {% for item in __.form_input_items %}{% endfor %}

export type ArgsT = {
  inputFieldName: inputFieldTsType,                                                       {% for input_field_spec in __.input_field_specs %}{% endfor %}
};

const postRedRose = (args: ArgsT) => {
  return doQuery(
    `mutation postRedRose(
      $inputFieldName: inputFieldGqlType                                                   {% for input_field_spec in __.input_field_specs %}{% endfor %}
    ) {
        postRedRose(
          inputFieldName: $inputFieldName                                                 {% for input_field_spec in __.input_field_specs|sort(attribute="name") %}{% endfor %}
        ) {
          {{ __.graphql_body() }}
        }
    }`,
    args
  ).then(
    (response: ObjT) => {
      return response.postRedRose;
    }
  );
};

export const usePostRedRose = () => {
  const mutation = useMutation(['postRedRose'], postRedRose, {
    onSuccess: () => {
      queryClient.invalidateQueries();
    }
  });
  return useMutationData(mutation);
};
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
