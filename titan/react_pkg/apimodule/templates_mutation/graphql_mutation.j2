{% magic_with _.mutation.name as callMyEndpoint %}
{% magic_with field_spec.name as myFieldName %}
{% magic_with field_spec.ts_type as myFieldTsType %}
{% magic_with field_spec.graphql_type("client") as myFieldGqlType %}
{% magic_with type_spec.type_name as MyTypeSpecName %}
{% magic_with output_field_spec.target as myOutputFieldType %}
{% magic_with output_field_spec.name as myOutputFieldName %}
import * as R from 'ramda';
import { useMutation } from '@tanstack/react-query';
import { queryClient } from 'src/api/queryClient';                                                          {% ?? _.mutation.api_spec.invalidates %}
import { doQuery } from 'src/api/graphqlClient';
import { ObjT } from 'src/utils/types';
import { wait } from 'src/utils/wait';
import { {{ type_spec.type_name }}T } from 'src/api/types/{{ type_spec.type_name.removesuffix("Form") }}T'; {% !! type_spec in __.form_input_type_specs %}
import { myTypeSpecNameGqlFields } from 'src/api/types/MyTypeSpecNameT'                                     {% !! type_spec in __.type_specs_to_import %}
import { {{ order_parent }}T } from 'src/api/types/{{ order_parent }}T';                                    {% !! order_parent, order_child, order_ids, order_api_specs in __.orders_data %}
import { hydrateMyOutputFieldType } from 'src/api/types/MyOutputFieldTypeT';                                {% !! output_field_spec in __.hydrated_fields %}
import { queryClient } from 'src/api/queryClient';
import { applyUpdate } from 'src/utils/applyUpdate';
import { sortByIds } from 'src/utils/ids';

export type ArgsT = {
  myFieldName: myFieldTsType;                                                                               {% !! field_spec in __.input_field_specs %}
};

export const callMyEndpoint = (args: ArgsT) => {
  return doQuery(
    `mutation callMyEndpoint(                                                                               {% if __.input_field_specs %}
      $myFieldName: myFieldGqlType                                                                          {% !! field_spec in __.input_field_specs %}
    ) {
      callMyEndpoint(
        myFieldName: $myFieldName                                                                           {% !! field_spec in __.input_field_specs|sort(attribute="name") %}
      ) {
    `mutation callMyEndpoint {                                                                              {% else %}
      callMyEndpoint {                                                                                      {% endif %}
{{ __.graphql_body }}
      }
    }`,
    args
  ).then(
    (response: ObjT) => {
      return wait(
        process.env.NODE_ENV === 'development' ? 1000 : 0,
        response.callMyEndpoint
      );
    }
  );
};

export const useCallMyEndpoint = () => {
  return useMutation({
    mutationKey: ['callMyEndpoint'],
    mutationFn: callMyEndpoint,
    {% include_snippet "__moonleap__/onSuccess.ts.j2" %}
  });
};
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
