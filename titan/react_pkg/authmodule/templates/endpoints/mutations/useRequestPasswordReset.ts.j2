import { useObservableMutation } from '/src/api/ObservableMutation';
import { doQuery } from '/src/api/graphqlClient';
import { States } from '/src/auth/endpoints/states';
import { isError } from '/src/auth/endpoints/utils';
import { AuthState } from '/src/auth/AuthState';
import { maybeSetCypressCookie } from '/src/utils/cookies';                                {% ?? _.service.cypress %}
import { ObjT } from '/src/utils/types';

export type ArgsT = {
  email: string;
};

export function requestPasswordReset(args: ArgsT) {
  return doQuery(
    `mutation ($email: String!) {
      requestPasswordReset(
        email: $email,
      ) {
        success,
        errors,
        passwordResetToken
      }
    }`,
    {
      email: args.email,
    }
  ).then((response: ObjT) => {
    if (isError(['requestPasswordReset', 'errors'])(response))
      return {
        success: false,
        errors: [States.REQUEST_PASSWORD_RESET_FAILED],
      };

    return {
      success: true,
      passwordResetToken: response.requestPasswordReset.passwordResetToken,
    };
  });
}

export const useRequestPasswordReset = (authState?: AuthState) => {
  const queryName = 'requestPasswordReset';

  return useObservableMutation({
    mutationFn: requestPasswordReset,
    onMutate: () => {
      maybeSetCypressCookie('cypressPasswordResetToken', '');                                 {% ?? _.service.cypress %}
      if (authState) authState.onUpdating(queryName);
    },
    onSuccess: (data: ObjT) => {
      maybeSetCypressCookie('cypressPasswordResetToken', data.passwordResetToken);            {% ?? _.service.cypress %}
      if (authState) authState.onUpdated(queryName, data);
    },
    onError: (error: Error) => {
      if (authState) authState.onErrored(queryName, error.message);
    },
  });
};
