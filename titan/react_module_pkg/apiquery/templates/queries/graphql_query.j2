{% magic_with res.fun_name as getRedRose %}
import { normalize, schema } from 'normalizr';
import { useQuery } from 'react-query';
import { useQueryData } from 'src/api/components';
import { doQuery } from 'src/utils/graphqlClient';
import { ObjT } from 'src/utils/types';
{{ sections.schema_imports() }}

export const {{ _.output_schema_name }} = new schema.Entity('{{ _.output_schema_name }}');
{{ sections.query_output_schema_fields() }}

const getRedRose = ({{ sections.javascript_args() }}) => {
  return doQuery(
    `query {{ res.name }}{{ sections.ts_graphql_query_args(True) }} {
{% for output_field_spec in res.outputs_type_spec.field_specs %}
        {{ output_field_spec.name }}{{ sections.ts_graphql_query_args(False) }} {
{{ sections.ts_graphql_query_body(output_field_spec) }}
        }
{% endfor %}
    }`,
    {
{{ sections.graphql_variables() }}
    }).then(
    (response: ObjT) => {
      return normalize(response, {{ _.output_schema_name }}).entities;
    });
}

export const useGetRedRose = () => {
  const query = useQuery(['getRedRose'], getRedRose);
  return useQueryData(query);
};
{% end_magic_with %}