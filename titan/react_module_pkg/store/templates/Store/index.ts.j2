{% magic_with item_list.item_name as yellowTulip %}
{% magic_with item.item_name as blueDaisy %}
{% clean_up_js_imports %}
import { action, observable, makeObservable } from 'mobx';
import { forEach, values } from 'ramda';
import { rsMap } from 'src/api/ResourceStateMap';
import { listToItemById } from 'src/utils/ids';
import { isUpdatedRS, RST } from 'src/utils/RST';
import { ObjT } from 'src/utils/types';

{{ sections.import_policies() }}
{{ sections.import_item_types() }}
{% end_clean_up_js_imports %}

export const resUrls = {
{% for item_list in res.item_lists_stored %}
  yellowTulipById: '{{ res.name }}/yellowTulipById',
{% endfor %}
{% for item in res.items_stored %}
  blueDaisy: '{{ res.name }}/blueDaisy',
{% endfor %}
};

export class {{ res.name }} {
{{ sections.item_list_fields() }}
{{ sections.item_fields() }}

  resUrls = () => resUrls;

  constructor() {
    makeObservable(this);
{% for policy in res.policies %}
    Policies.{{ policy.name }}()(this);
{% endfor %}
  }

  @action onLoadData(rs: RST, queryName: string, vars: ObjT, data: ObjT) {
{{ sections.on_load_data() }}
  }

{% for item_list in res.item_lists_stored %}
  @action addYellowTulips = (yellowTulips: YellowTulipT[]) => {
    this.yellowTulipById = {
      ...this.yellowTulipById,
      ...listToItemById(yellowTulips),
    };
  };
{% endfor %}
}
{% end_magic_with %}
{% end_magic_with %}
