{% magic_with item_list.item_name as yellowTulip %}
{% magic_with item.item_name as blueDaisy %}
{% magic_with field_spec.target as redRose %}
{% clean_up_js_imports %}
import { action, observable, makeObservable } from 'mobx';
import * as R from 'ramda';
import { mustHandleQuery, updateForeignKey } from 'src/api/utils';
import { removeItemsFromArray } from 'src/utils/array';
import { rsMap } from 'src/api/ResourceStateMap';
import { listToItemById } from 'src/utils/ids';
import { isUpdatedRS, RST } from 'src/utils/RST';
import { ObjT } from 'src/utils/types';

{{ sections.import_policies() }}
{{ sections.import_item_types() }}
{% end_clean_up_js_imports %}

export const resUrls = {
{% for item_list in res.item_lists_stored %}
  yellowTulipById: '{{ res.name }}/yellowTulipById',
{% endfor %}
{% for item in res.items_stored %}
  blueDaisy: '{{ res.name }}/blueDaisy',
{% endfor %}
};

export class {{ res.name }} {
{{ sections.item_list_fields() }}
{{ sections.item_fields() }}

  resUrls = () => resUrls;

  constructor() {
    makeObservable(this);
{% for policy in res.policies %}
    Policies.{{ policy.name }}()(this);
{% endfor %}
  }

  @action onLoadData(rs: RST, queryName: string, vars: ObjT, data: ObjT) {
    if (
      mustHandleQuery({
        storeName: '{{ res.name }}',
        queryName: queryName,
        data,
        propNames: [{{ sections.prop_names() }}],
        handled: [{{ sections.queries_handled() }}],
        ignored: [],
      })
    ) {
{% for item_list in res.item_lists_stored %}
      if (isUpdatedRS(rs)) {
        this.addYellowTulips(R.values(data?.yellowTulips ?? []));
{% for field_spec in _.related_set_field_specs_by_list_item_name.get(item_list.item_name, []) %}
        this.addRedRosesToYellowTulips(R.values(data?.redRoses ?? []));
        this.removeRedRosesFromYellowTulips(data?.deletedRedRoseIds ?? []);
{% endfor %}
      }
      rsMap.registerRS(rs, [resUrls.yellowTulipById]);
{% endfor %}
    }
  }

{% for item_list in res.item_lists_stored %}
  @action addYellowTulips = (yellowTulips: YellowTulipT[]) => {
    this.yellowTulipById = {
      ...this.yellowTulipById,
      ...listToItemById(yellowTulips),
    };
  };
{% endfor %}

{% for item_list in res.item_lists_stored %}
{% for field_spec in _.related_set_field_specs_by_list_item_name.get(item_list.item_name, []) %}
  @action addRedRosesToYellowTulips = (redRoses: RedRoseT[]) => {
    R.forEach((redRose: RedRoseT) => {
      updateForeignKey(this.yellowTulipById, '{{ field_spec.name }}', redRose.yellowTulipId, redRose.id);
    }, redRoses);
  };

  @action removeRedRosesFromYellowTulips = (ids: string[]) => {
    R.forEach((yellowTulip: YellowTulipT) => {
      removeItemsFromArray(yellowTulip.{{ field_spec.name }}, ids);
    }, R.values(this.yellowTulipById));
  };
{% endfor %}
{% endfor %}
}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
