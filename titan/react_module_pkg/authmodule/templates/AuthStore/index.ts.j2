import * as R from 'ramda';
import { action, makeObservable, observable } from 'mobx';
import { maybeSetCypressCookie } from 'src/utils/cookies';
import { ObjT } from 'src/utils/types';
{% if res.react_app.cypress %}
import { maybeSetCypressCookie } from 'src/utils/cookies';
{% endif %}

export const termsVersion: string =
  process.env.REACT_APP_TERMS_VERSION ?? '1.0.0';

export class Anonymous {}
export const anonymous = new Anonymous();

export class AuthStore {
  @observable signedInUserId: string | Anonymous = anonymous;

  constructor() {
    makeObservable(this);
  }

  @action onSignIn(data: ObjT) {
    if (R.isEmpty(data?.errors ?? [])) {
      this.signedInUserId = data.userId;
    }
  }

  @action onLoadUserId(data: ObjT) {
    if (R.isEmpty(data?.errors ?? [])) {
      this.signedInUserId = data.userId ?? anonymous;
    }
  }

  @action onSignOut(data: ObjT) {
    if (R.isEmpty(data?.errors ?? [])) {
      this.signedInUserId = anonymous;
    }
  }

  @action onSignUp(data: ObjT) {
{% if res.react_app.cypress %}
    if (R.isEmpty(data?.errors ?? [])) {
      maybeSetCypressCookie(
        'cypressAccountActivationToken',
        data.activationToken
      );
    }
    else {
      maybeSetCypressCookie('cypressAccountActivationToken', '');
    }
{% endif %}
  }

  @action onRequestPasswordReset(data: ObjT) {
{% if res.react_app.cypress %}
    if (R.isEmpty(data?.errors ?? [])) {
      maybeSetCypressCookie(
        'cypressPasswordResetToken',
        data.passwordResetToken
      );
    }
    else {
      maybeSetCypressCookie('cypressPasswordResetToken', '');
    }
{% endif %}
  }

  @action onResetPassword(data: ObjT) {
  }

  @action onActivateAccount(data: ObjT) {
  }
}
