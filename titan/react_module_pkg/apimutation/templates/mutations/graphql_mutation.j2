{% magic_with res.name as postRedRose %}
{% magic_with _.output_schema_name as postRedRoseOutputs %}
{% magic_with item_list_deleted.item_name as blueDaisy %}
import { normalize, schema } from 'normalizr';
import { useMutation } from 'react-query';
import { queryClient } from 'src/api/queryClient';
import { doQuery } from 'src/utils/graphqlClient';
import { ObjT } from 'src/utils/types';
{{ sections.schema_imports() }}
{{ sections.ts_type_imports() }}

export const postRedRoseOutputs = new schema.Entity('postRedRoseOutputs');
{{ sections.mutation_output_schema_fields() }}

const postRedRose = ({{ sections.ts_mutation_args() }}) => {
  return doQuery(
    `mutation postRedRose{{ sections.ts_mutation_graphql_args(True) }} {
        postRedRose{{ sections.ts_mutation_graphql_args(False) }} {
{{ sections.ts_mutation_graphql_body() }}
        }
    }`,
    {
{{ sections.ts_mutation_graphql_variables() }}
    }).then(
    (response: ObjT) => {
      return normalize(response.postRedRose, postRedRoseOutputs).entities;
    });
};

export const usePostRedRose = () => {
  return useMutation(['postRedRose'], postRedRose, {
    onSuccess: () => {
{{ sections.invalidate_queries() }}
    },
  });
};
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}