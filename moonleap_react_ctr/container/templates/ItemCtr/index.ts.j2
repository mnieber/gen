{% magic_with res.name as yellowTulip %}
{% magic_with res.module.name as gardenFlowers %}
{% magic_with behavior.name as blueDaisy %}
import { setCallbacks } from 'aspiration';
import {
  getm,
  mapDataToFacet,
  facet,
  installPolicies,
  registerFacets,
  ClassMemberT as CMT,
} from 'skandha';
import { makeCtrObservable } from 'skandha-mobx';
import { getIds } from 'src/utils/ids.ts';
import * as Facets from 'skandha-facets';
import * as FacetPolicies from 'skandha-facets/policies';
{% for behavior in res.behaviors %}
{{ behavior.imports_section }}
{% endfor %}

import { YellowTulipStore } from 'src/gardenFlowers/YellowTulipStore';
import { Container } from 'src/utils/Container';
import { Inputs } from 'src/gardenFlowers/YellowTulipCtr/facets/Inputs';
import { Outputs } from 'src/gardenFlowers/YellowTulipCtr/facets/Outputs';
import * as Policies from './policies';
import * as Handlers from './handlers';

type PropsT = {
  yellowTulipStore: YellowTulipStore;
};

export class YellowTulipCtr extends Container {
{% for behavior in res.behaviors %}
{{ behavior.constructor_section }}
{% endfor %}

  _setCallbacks(props: PropsT) {
    const ctr = this;
{% for behavior in res.behaviors %}

{{ behavior.callbacks_section }}
{% endfor %}
  }

  _applyPolicies(props: PropsT) {
{% remove_duplicates %}
{{ res.declare_policies_section }}
{% for behavior in res.behaviors %}
{{ behavior.declare_policies_section }}
{% endfor %}
{% end_remove_duplicates %}

      const policies = [
{{ res.policies_section }}
{% for behavior in res.behaviors %}
{{ behavior.policies_section }}
{% endfor %}
      ];

      installPolicies<YellowTulipCtr>(policies, this);
    }

  constructor(props: PropsT) {
    super();

    registerFacets(this);
    this._setCallbacks(props);
    this._applyPolicies(props);
    makeCtrObservable(this);
  }
}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
