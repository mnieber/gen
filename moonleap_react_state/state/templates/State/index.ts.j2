{% magic_with res.name as yellowTulip %}
{% magic_with store.name as BlueDaisy %}
{% magic_with item_name as redRose %}

{% clean_up_js_imports %}
import { setCallbacks } from 'aspiration';
import { makeObservable } from 'mobx';
import { addCleanUpFunctionToCtr, cleanUpCtr } from 'react-default-props-context';
import * as Skandha from 'skandha';
import { ClassMemberT as CMT, facet, getm } from 'skandha';
import { registerCtr } from 'skandha-mobx';
import { getIds } from 'src/utils/ids';
import * as Facets from 'skandha-facets';
import * as FacetPolicies from 'skandha-facets/policies';

{% for bvr in res.behaviors %}
{{ bvr.imports_section }}
{% endfor %}

{% for item_name, store in res.store_by_item_name.items() %}
import { BlueDaisy } from '{{ store.module_path }}/BlueDaisy';
{% endfor %}

import { Inputs } from '{{ res.module_path }}/YellowTulipState/facets/Inputs';
import { Outputs } from '{{ res.module_path }}/YellowTulipState/facets/Outputs';
import * as Policies from './policies';
import * as Handlers from './handlers';
{% end_clean_up_js_imports %}

type PropsT = {
{% for item_name, store in res.store_by_item_name.items() %}
  blueDaisy: BlueDaisy;
{% endfor %}
};

export class YellowTulipState {
  @facet inputs = new Inputs();
  @facet outputs = new Outputs();
{{ res.constructor_section }}

{{ res.callbacks_section }}

{% for item_name, bvrs in res.bvrs_by_item_name.items() %}
  _applyRedRosesPolicies(props: PropsT) {
{{ res.declare_policies_section(item_name) }}
{% for bvr in bvrs %}
{{ bvr.declare_policies_section(bvrs) }}
{% endfor %}

    const policies = [
{{ res.policies_section }}
{% for bvr in bvrs %}
{{ bvr.policies_section(bvrs) }}
{% endfor %}
    ];

    Skandha.installPolicies(policies, this.redRoses);
  }

{% endfor %}

  destroy() {
    cleanUpCtr(this);
  }

  constructor(props: PropsT) {
    registerCtr({
      ctr: this,
      childCtrs: [
{% for item_name, bvrs in res.bvrs_by_item_name.items() %}
        {
          ctr: this.redRoses,
          details: { name: 'RedRoses' },
          initCtr: () => {
            this._setRedRosesCallbacks(props);
            this._applyRedRosesPolicies(props);
            addCleanUpFunctionToCtr(this, () => cleanUpCtr(this.redRoses));
          },
        },
{% endfor %}
      ],
    });
  }
}
{% end_magic_with %}
{% end_magic_with %}
{% end_magic_with %}
