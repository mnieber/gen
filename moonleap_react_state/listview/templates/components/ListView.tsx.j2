{% magic_with res.item_name as yellowTulip %}
{% magic_with res.module.name as gardenFlowers %}
import { always, flow, map } from 'lodash/fp';
import { observer } from 'mobx-react-lite';
import { useDefaultProps, FC } from 'react-default-props-context';
import { ResourceView } from 'src/utils/components';
import { YellowTulipListViewItem } from 'src/gardenFlowers/components';
import { RST } from 'src/utils/RST';
import { YellowTulipT } from 'src/gardenFlowers/types'
import classnames from 'classnames';

import './YellowTulipListView.scss';

type PropsT = {
  className?: any;
};

type DefaultPropsT = {
  yellowTulips: YellowTulipT[]
  yellowTulipsRS: RST
};

export const YellowTulipListView: FC<PropsT, DefaultPropsT> = observer((p: PropsT) => {
  const props = useDefaultProps<PropsT, DefaultPropsT>(p);

  const yellowTulipDivs = flow(
    always(props.yellowTulips),
    map((x) => (
      <YellowTulipListViewItem
        key={x.id}
        yellowTulip={x}
      />
    ))
  )();

  const noItems = <h2>There are no yellowTulips</h2>;

  const updatedDiv = (
    <div
      className={classnames(
        "YellowTulipListView flex flex-col w-full",
        props.className
      )}
    >
      {yellowTulipDivs.length && yellowTulipDivs}
      {!yellowTulipDivs.length && noItems}
    </div>
  );

  return (
    <ResourceView
      rs={props.yellowTulipsRS}
      renderUpdated={() => updatedDiv}
      renderErrored={(message) => {
        return <div className="text-white">{message}</div>;
      }}
    />
  );
});
{% end_magic_with %}
{% end_magic_with %}
