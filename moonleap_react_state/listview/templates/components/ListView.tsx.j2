{% magic_with res.item_name as yellowTulip %}
{% magic_with res.module.name as gardenFlowers %}
{% clean_up_js_imports %}
import classnames from 'classnames';
import { always, pipe, map } from 'ramda';
import { observer } from 'mobx-react-lite';
import { FC, useDefaultProps } from 'react-default-props-context';
import { YellowTulipListViewItem } from 'src/gardenFlowers/components';
import { YellowTulipT } from 'src/gardenFlowers/types';
import { getResourceView } from 'src/utils/components';

{{ res.p_section_imports }}

{% end_clean_up_js_imports %}

import './YellowTulipListView.scss';

type PropsT = {
  className?: any;
};

type DefaultPropsT = {
  yellowTulips: YellowTulipT[],
  yellowTulipsResUrl: string,
{{ res.default_props_section }}
};

export const YellowTulipListView: FC<PropsT, DefaultPropsT> = observer((p: PropsT) => {
  const props = useDefaultProps<PropsT, DefaultPropsT>(p);

  const resourceView = getResourceView({ resUrl: props.yellowTulipsResUrl });
  if (resourceView) return resourceView;

  const yellowTulipDivs = pipe(
    always(props.yellowTulips),
    map((x: YellowTulipT) => (
      <YellowTulipListViewItem
        key={x.id}
        yellowTulip={x}
        className={classnames({
{{ res.classnames_section }}
        })}
{{ res.on_click_section }}
      />
    ))
  )();


  const noItems = <h2>There are no yellowTulips</h2>;

  return (
    <div
      className={classnames(
        "YellowTulipListView flex flex-col w-full",
        props.className
      )}
    >
      {yellowTulipDivs.length && yellowTulipDivs}
      {!yellowTulipDivs.length && noItems}
    </div>
  );
});
{% end_magic_with %}
{% end_magic_with %}
